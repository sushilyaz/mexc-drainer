package com.suhoi.mexcdrainer.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;

/**
 * –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–ª–∏–≤–∞ USDT –º–µ–∂–¥—É –¥–≤—É–º—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –º–æ–Ω–µ—Ç—É —Å –±–æ–ª—å—à–∏–º —Å–ø—Ä–µ–¥–æ–º.
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class DrainService {

    private final MexcTradeService mexcTradeService;

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–ª–∏–≤–∞
     *
     * @param symbol     —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, ANTUSDT)
     * @param usdtAmount —Å—É–º–º–∞ –≤ USDT –¥–ª—è –ø–µ—Ä–µ–ª–∏–≤–∞
     * @param chatId     id —á–∞—Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
     */
    public void startDrain(String symbol, BigDecimal usdtAmount, Long chatId) {
        log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–ª–∏–≤–∞: —Å–∏–º–≤–æ–ª={}, —Å—É–º–º–∞={} USDT", symbol, usdtAmount);

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
            if (!mexcTradeService.checkBalances(usdtAmount, chatId)) {
                log.warn("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –¥–ª—è –ø–µ—Ä–µ–ª–∏–≤–∞ {} USDT", usdtAmount);
                return;
            }

            // –ü–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî –ø–æ–∫—É–ø–∫–∞ –ø–æ —Ä—ã–Ω–∫—É
            String orderIdA = mexcTradeService.marketBuyAccountA(symbol, usdtAmount, chatId);
            log.info("‚úÖ –ê–∫–∫–∞—É–Ω—Ç A –∫—É–ø–∏–ª –ø–æ —Ä—ã–Ω–∫—É {} –Ω–∞ {} USDT, –æ—Ä–¥–µ—Ä={}", symbol, usdtAmount, orderIdA);

            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ A (—É–∂–µ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏)
            BigDecimal tokensA = mexcTradeService.getTokenBalanceAccountA(symbol, chatId);
            log.info("üìä –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ A –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {}", tokensA);

            int cycle = 1;
            while (tokensA.compareTo(BigDecimal.ZERO) > 0) {
                log.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ {} ({} —Ç–æ–∫–µ–Ω–æ–≤)", cycle, tokensA);
                executeCycle(symbol, tokensA, chatId);

                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞
                tokensA = mexcTradeService.getTokenBalanceAccountA(symbol, chatId);
                log.info("üìä –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ A: {}", tokensA);

                cycle++;
            }

            BigDecimal finalUsdt = mexcTradeService.getUsdtBalanceAccountA(chatId);
            log.info("‚úÖ –ü–µ—Ä–µ–ª–∏–≤ –∑–∞–≤–µ—Ä—à—ë–Ω. –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ A ‚âà {} USDT", finalUsdt);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–ª–∏–≤–∞", e);
        }
    }

    /**
     * –û–¥–∏–Ω —Ü–∏–∫–ª –ø–µ—Ä–µ–ª–∏–≤–∞ (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏)
     *
     * @param symbol   —Ç–∏–∫–µ—Ä
     * @param qty      –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ A
     * @param chatId   id —á–∞—Ç–∞
     */
    private void executeCycle(String symbol, BigDecimal qty, Long chatId) {
        try {
            // –õ–∏–º–∏—Ç–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (A)
            BigDecimal sellPrice = mexcTradeService.getNearLowerSpreadPrice(symbol);
            String limitSellOrderId = mexcTradeService.placeLimitSellAccountA(symbol, sellPrice, qty, chatId);
            log.info("A ‚û° –ü—Ä–æ–¥–∞–∂–∞ –ª–∏–º–∏—Ç–∫–æ–π: {} @ {}, –æ—Ä–¥–µ—Ä={}", qty, sellPrice, limitSellOrderId);

            // B –≤—ã–∫—É–ø–∞–µ—Ç
            mexcTradeService.buyFromAccountB(symbol, sellPrice, qty, chatId);
            log.info("B ‚û° –ö—É–ø–∏–ª {} @ {}", qty, sellPrice);

            // –¢–µ–ø–µ—Ä—å —É A USDT, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            BigDecimal usdtA = mexcTradeService.getUsdtBalanceAccountA(chatId);
            log.info("üìä –ë–∞–ª–∞–Ω—Å USDT –Ω–∞ A –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏: {}", usdtA);

            if (usdtA.compareTo(BigDecimal.ONE) < 0) {
                log.warn("‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∞ ({}), –≤—ã—Ö–æ–¥–∏–º", usdtA);
                return;
            }

            // –õ–∏–º–∏—Ç–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É (A)
            BigDecimal buyPrice = mexcTradeService.getNearUpperSpreadPrice(symbol);
            String limitBuyOrderId = mexcTradeService.placeLimitBuyAccountA(symbol, buyPrice, usdtA, chatId);
            log.info("A ‚û° –í—ã—Å—Ç–∞–≤–∏–ª –ª–∏–º–∏—Ç–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–∞ {} USDT @ {}, –æ—Ä–¥–µ—Ä={}", usdtA, buyPrice, limitBuyOrderId);

            // B –ø—Ä–æ–¥–∞–µ—Ç
            mexcTradeService.sellFromAccountB(symbol, buyPrice, usdtA, chatId);
            log.info("B ‚û° –ü—Ä–æ–¥–∞–ª –≤ –ª–∏–º–∏—Ç–∫—É A {} @ {}", usdtA, buyPrice);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–µ—Ä–µ–ª–∏–≤–∞", e);
            try {
                // –§–µ–π–ª ‚Äî —á–∏—Å—Ç–∏–º –ø–æ–∑–∏—Ü–∏—é
                BigDecimal tokensA = mexcTradeService.getTokenBalanceAccountA(symbol, chatId);
                if (tokensA.compareTo(BigDecimal.ZERO) > 0) {
                    mexcTradeService.forceMarketSellAccountA(symbol, tokensA, chatId);
                }
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }
        }
    }
}
