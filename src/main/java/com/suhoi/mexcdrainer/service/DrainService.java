package com.suhoi.mexcdrainer.service;

import com.suhoi.mexcdrainer.util.MemoryDb;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;

/**
 * –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–ª–∏–≤–∞ USDT –º–µ–∂–¥—É –¥–≤—É–º—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –º–æ–Ω–µ—Ç—É —Å –±–æ–ª—å—à–∏–º —Å–ø—Ä–µ–¥–æ–º.
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class DrainService {

    private final MexcTradeService mexcTradeService;

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–ª–∏–≤–∞
     *
     * @param symbol     —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, ANTUSDT)
     * @param usdtAmount —Å—É–º–º–∞ –≤ USDT –¥–ª—è –ø–µ—Ä–µ–ª–∏–≤–∞
     * @param chatId     id —á–∞—Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
     */
    public void startDrain(String symbol, BigDecimal usdtAmount, Long chatId, int cycles) {
        try {
            log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–ª–∏–≤–∞: —Å–∏–º–≤–æ–ª={}, —Å—É–º–º–∞={} USDT", symbol, usdtAmount);

            // –®–ê–ì 1 MARKET BUY A (–±–µ—Ä—ë–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ executedQty)
            MexcTradeService.OrderInfo buyA = mexcTradeService.marketBuyAccountAFull(symbol, usdtAmount, chatId);
            if (buyA == null || buyA.executedQty().signum() <= 0) {
                log.error("A ‚û° Market BUY –Ω–µ –¥–∞–ª executedQty. –°—Ç–∞—Ç—É—Å={}", buyA == null ? "null" : buyA.status());
                return;
            }
            BigDecimal qtyTokens = buyA.executedQty();
            log.info("A ‚û° –ö—É–ø–∏–ª –Ω–∞ {} USDT, –ø–æ–ª—É—á–∏–ª {} —Ç–æ–∫–µ–Ω–æ–≤ (avg={})",
                    buyA.cummQuoteQty().stripTrailingZeros().toPlainString(),
                    qtyTokens.stripTrailingZeros().toPlainString(),
                    buyA.avgPrice().stripTrailingZeros().toPlainString()
            );

            // 2) –¶–∏–∫–ª—ã
            for (int i = 0; i < cycles; i++) {
                log.info("üîÑ –¶–∏–∫–ª {}/{}", i + 1, cycles);
                qtyTokens = executeCycle(symbol, qtyTokens, chatId); // –≤–µ—Ä–Ω—ë–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π nextQty
                if (qtyTokens == null || qtyTokens.compareTo(BigDecimal.ZERO) <= 0) {
                    log.warn("‚ö† –°–ª–µ–¥—É—é—â–∏–π –æ–±—ä—ë–º –¥–ª—è —Ü–∏–∫–ª–∞ <= 0 ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è");
                    break;
                }
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ startDrain", e);
        }
    }

    /**
     * –û–¥–∏–Ω —Ü–∏–∫–ª –ø–µ—Ä–µ–ª–∏–≤–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ A –ø–æ—Å–ª–µ –ª–∏–º–∏—Ç–Ω–æ–π –ø–æ–∫—É–ø–∫–∏.
     *
     * @param symbol     —Ç–∏–∫–µ—Ä
     * @param qtyTokens  —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–¥–∞—ë–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ (—Ä–∞–≤–Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É A –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —à–∞–≥–∞)
     * @param chatId     —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç
     * @return           —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∫—É–ø–ª–µ–Ω–Ω–æ–µ A –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞ (executedQty –ª–∏–º–∏—Ç–Ω–æ–π –ø–æ–∫—É–ø–∫–∏)
     */
    private BigDecimal executeCycle(String symbol, BigDecimal qtyTokens, Long chatId) {
        try {
            long tCycle = System.currentTimeMillis();

            //  –®–ê–ì 2 A –ø—Ä–æ–¥–∞—ë—Ç –ª–∏–º–∏—Ç–∫–æ–π –≤–æ–∑–ª–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
            BigDecimal sellPrice = mexcTradeService.getNearLowerSpreadPrice(symbol);
            log.info("üéØ A SELL –ª–∏–º–∏—Ç–∫–∞: price={} (–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞)", sellPrice.stripTrailingZeros().toPlainString());

            String sellOrderId = mexcTradeService.placeLimitSellAccountA(symbol, sellPrice, qtyTokens, chatId);
            log.info("A ‚û° SELL –ª–∏–º–∏—Ç–∫–∞ {} —Ç–æ–∫–µ–Ω–æ–≤ @ {} (orderId={})",
                    qtyTokens.stripTrailingZeros(), sellPrice.stripTrailingZeros(), sellOrderId);

            //  –®–ê–ì 3  B –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ —Ä—ã–Ω–∫—É (–Ω–∞ —Å—É–º–º—É ~ price*qty c —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏), —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å A
            log.info("üßÆ –ü–ª–∞–Ω –¥–ª—è B BUY: —Ü–µ–Ω–∞={} * qty={} ‚âà {} USDT",
                    sellPrice.stripTrailingZeros(), qtyTokens.stripTrailingZeros(),
                    sellPrice.multiply(qtyTokens).stripTrailingZeros());
            mexcTradeService.marketBuyFromAccountB(symbol, sellPrice, qtyTokens, chatId);
            log.info("B ‚û° BUY market ~{} —Ç–æ–∫–µ–Ω–æ–≤ @ {} (–Ω–∞ —Å—É–º–º—É ~—Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏)",
                    qtyTokens.stripTrailingZeros(), sellPrice.stripTrailingZeros());

            //  –®–ê–ì 4  –î–æ–∂–∏–¥–∞–µ–º—Å—è FILLED –ø–æ A-SELL, —á—Ç–æ–±—ã –≤–∑—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π usdtEarned
            MexcTradeService.OrderInfo sellAInfo = null;
            if (sellOrderId != null) {
                var credsA = MemoryDb.getAccountA(chatId);
                sellAInfo = mexcTradeService.waitUntilFilled(symbol, sellOrderId, credsA.getApiKey(), credsA.getSecret(), 6000);
            }
            if (sellAInfo == null || sellAInfo.executedQty().signum() <= 0) {
                log.warn("A SELL –Ω–µ FILLED –∏–ª–∏ executedQty=0. –°—Ç–∞—Ç—É—Å={}", sellAInfo == null ? "null" : sellAInfo.status());
                return BigDecimal.ZERO;
            }
            BigDecimal usdtEarned = sellAInfo.cummQuoteQty(); // —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª–æ –Ω–∞ A
            log.info("üìä A –ø–æ–ª—É—á–∏–ª –æ—Ç SELL {} USDT (executedQty={} @ avg={})",
                    usdtEarned.stripTrailingZeros(),
                    sellAInfo.executedQty().stripTrailingZeros(),
                    sellAInfo.avgPrice().stripTrailingZeros());

            //  –®–ê–ì 5  A –≥–æ—Ç–æ–≤–∏—Ç –ª–∏–º–∏—Ç–Ω—ã–π BUY –≤–æ–∑–ª–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã,
            //    –ù–û —Å–Ω–∞—á–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å–º–æ–∂–µ—Ç –ø—Ä–æ–¥–∞—Ç—å B (—É—á—ë—Ç stepSize/minNotional/–æ—Å—Ç–∞—Ç–∫–∞/–∫–æ–º–∏—Å—Å–∏–∏)
            BigDecimal buyPrice = mexcTradeService.getNearUpperSpreadPrice(symbol);
            log.info("üéØ A BUY –ª–∏–º–∏—Ç–∫–∞: –ø–ª–∞–Ω–∏—Ä—É–µ–º price={} (–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞)", buyPrice.stripTrailingZeros().toPlainString());

            // –ø–ª–∞–Ω–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ–¥–∞—Ç—å B –ø–æ —Ä—ã–Ω–∫—É
            BigDecimal plannedSellQtyB = mexcTradeService.planMarketSellQtyAccountB(symbol, buyPrice, qtyTokens, chatId);
            if (plannedSellQtyB.compareTo(BigDecimal.ZERO) <= 0) {
                log.warn("B –Ω–µ –º–æ–∂–µ—Ç –≤—ã—Å—Ç–∞–≤–∏—Ç—å MARKET SELL ‚â• minNotional. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª.");
                return BigDecimal.ZERO;
            }

            // –æ—Å—Ç–∞–≤–∏–º —á—É—Ç—å USDT –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—É—é maker-–∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –ª–∏–º–∏—Ç–Ω–æ–º BUY A
            BigDecimal spendA = mexcTradeService.reserveForMakerFee(usdtEarned);
            // –Ω–µ –ø–æ–∫—É–ø–∞–µ–º –±–æ–ª—å—à–µ, —á–µ–º B —Ä–µ–∞–ª—å–Ω–æ —Å–æ–ª—å—ë—Ç
            BigDecimal capByQty = buyPrice.multiply(plannedSellQtyB);
            if (spendA.compareTo(capByQty) > 0) spendA = capByQty;

            String buyOrderId = mexcTradeService.placeLimitBuyAccountA(symbol, buyPrice, spendA, plannedSellQtyB, chatId);
            log.info("A ‚û° BUY –ª–∏–º–∏—Ç–∫–∞ –Ω–∞ {} USDT @ {} (maxQty={} ; orderId={})",
                    spendA.stripTrailingZeros(), buyPrice.stripTrailingZeros(),
                    plannedSellQtyB.stripTrailingZeros(), buyOrderId);

            //  –®–ê–ì 6  B –ø—Ä–æ–¥–∞—ë—Ç –ø–æ —Ä—ã–Ω–∫—É —Ä–æ–≤–Ω–æ —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –∑–∞–ª–æ–∂–∏–ª–∏ –≤ BUY A
            mexcTradeService.marketSellFromAccountB(symbol, buyPrice, plannedSellQtyB, chatId);
            log.info("B ‚û° SELL market {} —Ç–æ–∫–µ–Ω–æ–≤ @ {}", plannedSellQtyB.stripTrailingZeros(), buyPrice.stripTrailingZeros());

            //  –®–ê–ì 7  –î–æ–∂–∏–¥–∞–µ–º—Å—è FILLED –ø–æ A-BUY, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª
            MexcTradeService.OrderInfo buyAInfo = null;
            if (buyOrderId != null) {
                var credsA = MemoryDb.getAccountA(chatId);
                buyAInfo = mexcTradeService.waitUntilFilled(symbol, buyOrderId, credsA.getApiKey(), credsA.getSecret(), 6000);
            }
            if (buyAInfo == null || buyAInfo.executedQty().signum() <= 0) {
                log.warn("A BUY –Ω–µ FILLED –∏–ª–∏ executedQty=0. –°—Ç–∞—Ç—É—Å={}", buyAInfo == null ? "null" : buyAInfo.status());
                return BigDecimal.ZERO;
            }

            long dt = System.currentTimeMillis() - tCycle;
            log.info("‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {} ms. A –ø–æ–ª—É—á–∏–ª {} —Ç–æ–∫–µ–Ω–æ–≤ (avg={}), –ø–æ—Ç—Ä–∞—Ç–∏–ª {} USDT.",
                    dt,
                    buyAInfo.executedQty().stripTrailingZeros().toPlainString(),
                    buyAInfo.avgPrice().stripTrailingZeros().toPlainString(),
                    buyAInfo.cummQuoteQty().stripTrailingZeros().toPlainString());

            return buyAInfo.executedQty();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ executeCycle", e);
            try {
                BigDecimal tokensA = mexcTradeService.getTokenBalanceAccountA(symbol, chatId);
                if (tokensA.compareTo(BigDecimal.ZERO) > 0) {
                    mexcTradeService.forceMarketSellAccountA(symbol, tokensA, chatId);
                }
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }
            return BigDecimal.ZERO;
        }
    }
}
