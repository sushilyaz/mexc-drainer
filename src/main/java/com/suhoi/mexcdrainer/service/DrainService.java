package com.suhoi.mexcdrainer.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;

/**
 * –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–ª–∏–≤–∞ USDT –º–µ–∂–¥—É –¥–≤—É–º—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –º–æ–Ω–µ—Ç—É —Å –±–æ–ª—å—à–∏–º —Å–ø—Ä–µ–¥–æ–º.
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class DrainService {

    private final MexcTradeService mexcTradeService;

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–ª–∏–≤–∞
     *
     * @param symbol    —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, ANTUSDT)
     * @param usdtAmount —Å—É–º–º–∞ –≤ USDT –¥–ª—è –ø–µ—Ä–µ–ª–∏–≤–∞
     * @param chatId    id —á–∞—Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
     */
    public void startDrain(String symbol, BigDecimal usdtAmount, Long chatId) {
        log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–ª–∏–≤–∞: —Å–∏–º–≤–æ–ª={}, —Å—É–º–º–∞={} USDT", symbol, usdtAmount);

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
            if (!mexcTradeService.checkBalances(usdtAmount, chatId)) {
                log.warn("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –¥–ª—è –ø–µ—Ä–µ–ª–∏–≤–∞ {} USDT", usdtAmount);
                return;
            }

            // –ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –ø–æ —Ä—ã–Ω–∫—É
            executeCycle(symbol, usdtAmount, true, chatId);

            // –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –ø–æ—Ç–µ—Ä—è ~5-10%)
            BigDecimal remaining = usdtAmount.multiply(BigDecimal.valueOf(0.9));

            int cycle = 2;
            while (remaining.compareTo(BigDecimal.valueOf(1)) > 0) { // –ø–æ–∫–∞ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã $1
                log.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ {} —Å —Å—É–º–º–æ–π {} USDT", cycle, remaining);
                executeCycle(symbol, remaining, false,  chatId);
                remaining = remaining.multiply(BigDecimal.valueOf(0.9));
                cycle++;
            }

            log.info("‚úÖ –ü–µ—Ä–µ–ª–∏–≤ –∑–∞–≤–µ—Ä—à—ë–Ω, –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ ‚âà {} USDT", remaining);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–ª–∏–≤–∞", e);
        }
    }

    /**
     * –û–¥–∏–Ω —Ü–∏–∫–ª –ø–µ—Ä–µ–ª–∏–≤–∞
     *
     * @param symbol    —Ç–∏–∫–µ—Ä
     * @param amount    —Å—É–º–º–∞
     * @param withMarketBuy –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫—É –ø–æ —Ä—ã–Ω–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è 1 —Ü–∏–∫–ª–∞)
     */
    private void executeCycle(String symbol, BigDecimal amount, boolean withMarketBuy, Long chatId) {
        try {
            if (withMarketBuy) {
                String orderIdA = mexcTradeService.marketBuyAccountA(symbol, amount, chatId);
                log.info("–¶–∏–∫–ª: –ê–∫–∫–∞—É–Ω—Ç A –∫—É–ø–∏–ª –ø–æ —Ä—ã–Ω–∫—É {} –Ω–∞ {} USDT, –æ—Ä–¥–µ—Ä={}", symbol, amount, orderIdA);
            }

            // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–ê–∫–∫–∞—É–Ω—Ç A)
            BigDecimal sellPrice = mexcTradeService.getNearLowerSpreadPrice(symbol);
            String limitSellOrderId = mexcTradeService.placeLimitSellAccountA(symbol, sellPrice, amount, chatId);
            log.info("–¶–∏–∫–ª: –ê–∫–∫–∞—É–Ω—Ç A –≤—ã—Å—Ç–∞–≤–∏–ª –ª–∏–º–∏—Ç–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: —Ü–µ–Ω–∞={}, —Å—É–º–º–∞={}, –æ—Ä–¥–µ—Ä={}", sellPrice, amount, limitSellOrderId);

            // –ê–∫–∫–∞—É–Ω—Ç B –≤—ã–∫—É–ø–∞–µ—Ç –ª–∏–º–∏—Ç–∫—É
            mexcTradeService.buyFromAccountB(symbol, sellPrice, amount, chatId);
            log.info("–¶–∏–∫–ª: –ê–∫–∫–∞—É–Ω—Ç B –∫—É–ø–∏–ª —É A –ø–æ —Ü–µ–Ω–µ {} –Ω–∞ —Å—É–º–º—É {}", sellPrice, amount);

            // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É (–ê–∫–∫–∞—É–Ω—Ç A)
            BigDecimal buyPrice = mexcTradeService.getNearUpperSpreadPrice(symbol);
            String limitBuyOrderId = mexcTradeService.placeLimitBuyAccountA(symbol, buyPrice, amount, chatId);
            log.info("–¶–∏–∫–ª: –ê–∫–∫–∞—É–Ω—Ç A –≤—ã—Å—Ç–∞–≤–∏–ª –ª–∏–º–∏—Ç–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É: —Ü–µ–Ω–∞={}, —Å—É–º–º–∞={}, –æ—Ä–¥–µ—Ä={}", buyPrice, amount, limitBuyOrderId);

            // –ê–∫–∫–∞—É–Ω—Ç B –ø—Ä–æ–¥–∞—ë—Ç –≤ –ª–∏–º–∏—Ç–∫—É A
            mexcTradeService.sellFromAccountB(symbol, buyPrice, amount, chatId);
            log.info("–¶–∏–∫–ª: –ê–∫–∫–∞—É–Ω—Ç B –ø—Ä–æ–¥–∞–ª –≤ –ª–∏–º–∏—Ç–∫—É A –ø–æ —Ü–µ–Ω–µ {} –Ω–∞ —Å—É–º–º—É {}", buyPrice, amount);

            log.info("‚úÖ –¶–∏–∫–ª –ø–µ—Ä–µ–ª–∏–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–µ—Ä–µ–ª–∏–≤–∞", e);
            // –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Ä–∞—Å–ø—Ä–æ–¥–∞–µ–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –ê –≤—Å—ë –ø–æ —Ä—ã–Ω–∫—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–ª–æ
            try {
                mexcTradeService.forceMarketSellAccountA(symbol, amount, chatId);
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }
        }
    }
}


