package com.suhoi.mexcdrainer.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;

/**
 * –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–ª–∏–≤–∞ USDT –º–µ–∂–¥—É –¥–≤—É–º—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –º–æ–Ω–µ—Ç—É —Å –±–æ–ª—å—à–∏–º —Å–ø—Ä–µ–¥–æ–º.
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class DrainService {

    private final MexcTradeService mexcTradeService;

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–ª–∏–≤–∞
     *
     * @param symbol     —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, ANTUSDT)
     * @param usdtAmount —Å—É–º–º–∞ –≤ USDT –¥–ª—è –ø–µ—Ä–µ–ª–∏–≤–∞
     * @param chatId     id —á–∞—Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
     */
    public void startDrain(String symbol, BigDecimal usdtAmount, Long chatId, int cycles) {
        try {
            log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–ª–∏–≤–∞: —Å–∏–º–≤–æ–ª={}, —Å—É–º–º–∞={} USDT", symbol, usdtAmount);

            // 1Ô∏è‚É£ –ù–∞ A –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ usdtAmount
            mexcTradeService.marketBuyAccountA(symbol, usdtAmount, chatId);
            // –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤
            BigDecimal qtyTokens = mexcTradeService.getTokenBalanceAccountA(symbol, chatId);
            log.info("A ‚û° –ö—É–ø–∏–ª –Ω–∞ {} USDT, –ø–æ–ª—É—á–∏–ª {} —Ç–æ–∫–µ–Ω–æ–≤", usdtAmount, qtyTokens);

            // 2Ô∏è‚É£ –ö—Ä—É—Ç–∏–º —Ü–∏–∫–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            for (int i = 0; i < cycles; i++) {
                log.info("üîÑ –¶–∏–∫–ª {}/{}", i + 1, cycles);
                executeCycle(symbol, qtyTokens, chatId);

                // –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω—è—Ç—å qtyTokens –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Å –±–∏—Ä–∂–∏, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–ª–∞—Å—å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                qtyTokens = mexcTradeService.getTokenBalanceAccountB(symbol, chatId);
                if (qtyTokens.compareTo(BigDecimal.ZERO) <= 0) {
                    log.warn("‚ö† –£ B –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–ª–∏–≤");
                    break;
                }
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ startDrain", e);
        }
    }

    /**
     * –û–¥–∏–Ω —Ü–∏–∫–ª –ø–µ—Ä–µ–ª–∏–≤–∞ (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏)
     *
     * @param symbol   —Ç–∏–∫–µ—Ä
     * @param chatId   id —á–∞—Ç–∞
     */
    private void executeCycle(String symbol, BigDecimal qtyTokens, Long chatId) {
        try {
            // 1Ô∏è‚É£ A –ø—Ä–æ–¥–∞–µ—Ç –ª–∏–º–∏—Ç–∫–æ–π
            BigDecimal sellPrice = mexcTradeService.getNearLowerSpreadPrice(symbol);
            mexcTradeService.placeLimitSellAccountA(symbol, sellPrice, qtyTokens, chatId);
            log.info("A ‚û° –í—ã—Å—Ç–∞–≤–∏–ª –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –Ω–∞ —Å—É–º–º—É {} —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —Ü–µ–Ω–µ {}", qtyTokens, sellPrice);

            // 2Ô∏è‚É£ B –ø–æ–∫—É–ø–∞–µ—Ç —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ –∂–µ
            mexcTradeService.marketBuyFromAccountB(symbol, sellPrice, qtyTokens, chatId);
            log.info("B ‚û° –ö—É–ø–∏–ª –ø–æ —Ä—ã–Ω–∫—É {} —Ç–æ–∫–µ–Ω–æ–≤ @ {}", qtyTokens, sellPrice);

            // 3Ô∏è‚É£ –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ USDT –∏–º–µ–µ—Ç A
            BigDecimal usdtEarned = sellPrice.multiply(qtyTokens).setScale(5, RoundingMode.DOWN);
            log.info("üìä A –æ—Å—Ç–∞–ª–æ—Å—å {} USDT", usdtEarned);

            // 4Ô∏è‚É£ A —Å—Ç–∞–≤–∏—Ç –ª–∏–º–∏—Ç–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–∞ —ç—Ç—É —Å—É–º–º—É
            BigDecimal buyPrice = mexcTradeService.getNearUpperSpreadPrice(symbol);
            mexcTradeService.placeLimitBuyAccountA(symbol, buyPrice, usdtEarned, chatId);
            log.info("A ‚û° –õ–∏–º–∏—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–∞ {} USDT @ {}", usdtEarned, buyPrice);

            // 5Ô∏è‚É£ B –ø—Ä–æ–¥–∞—ë—Ç –æ–±—Ä–∞—Ç–Ω–æ —Ä–æ–≤–Ω–æ qtyTokens
            mexcTradeService.marketSellFromAccountB(symbol, buyPrice, qtyTokens, chatId);
            log.info("B ‚û° –ü—Ä–æ–¥–∞–ª –æ–±—Ä–∞—Ç–Ω–æ {} —Ç–æ–∫–µ–Ω–æ–≤ @ {}", qtyTokens, buyPrice);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ executeCycle", e);
            try {
                BigDecimal tokensA = mexcTradeService.getTokenBalanceAccountA(symbol, chatId);
                if (tokensA.compareTo(BigDecimal.ZERO) > 0) {
                    mexcTradeService.forceMarketSellAccountA(symbol, tokensA, chatId);
                }
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }
        }
    }
}
