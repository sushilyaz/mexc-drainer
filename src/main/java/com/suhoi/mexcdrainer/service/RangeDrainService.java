package com.suhoi.mexcdrainer.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.security.SecureRandom;
import java.util.HexFormat;

import static java.math.BigDecimal.ZERO;

/**
 * –ü–µ—Ä–µ–ª–∏–≤ USDT –≤ –ó–ê–î–ê–ù–ù–û–ú —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ë–ï–ó –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–ø—Ä–µ–¥–∞.
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º —à–∞–≥–∞ (–ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –æ–±—ã—á–Ω–æ–≥–æ DrainService, –Ω–æ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞):
 *   1) A: LIMIT SELL @ low, qty = min(plan, balanceA)  (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî "seed")
 *   2) B: MARKET BUY –Ω–∞ —Ç—É –∂–µ qty (—á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –Ω–∞—à—É –ª–∏–º–∏—Ç–∫—É A)
 *   3) A: LIMIT BUY  @ high –Ω–∞ –±—é–¥–∂–µ—Ç ‚âà qty * high (maxQty = qty, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—É–ø–∏—Ç—å)
 *   4) B: MARKET SELL —Ç–æ–π –∂–µ qty (–∑–∞–∫—Ä—ã–≤–∞–µ–º –ª–∏–º–∏—Ç–∫—É A BUY)
 *
 * –¶–µ–ª—å: –ø–µ—Ä–µ–ª–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ targetUsdt (–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ delta * qty –∑–∞ –≤—Å–µ —à–∞–≥–∏),
 * –≥–¥–µ delta = high - low.
 *
 * –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–Ω—Ç—Ä–æ–ª—è —Å–ø—Ä–µ–¥–∞ –ù–ï–¢ ‚Äî –±–æ—Ç –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class RangeDrainService {

    private final MexcTradeService mexc;

    /** –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏, –º—Å (—á—Ç–æ–±—ã –Ω–µ –¥—É—à–∏—Ç—å API/–º–∞—Ç—á–∏–Ω–≥). */
    private static final long STEP_SLEEP_MS = 350L;

    /** –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ "–ø–æ–¥—Å–µ–≤–∞" –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ A. */
    private static final int SEED_MAX_RETRIES = 3;

    /** –ù–∞–∫–∏–¥–∫–∞ 5% –Ω–∞ –±—é–¥–∂–µ—Ç –ø–æ–¥ "seed"-–ø–æ–∫—É–ø–∫—É (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø–∞—Å –Ω–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ/–∫–æ–º–∏—Å—Å–∏–∏). */
    private static final BigDecimal SEED_BUDGET_K = new BigDecimal("1.05");

    /** –°–ª—É–∂–µ–±–Ω—ã–π id –∑–∞–ø—É—Å–∫–∞ ‚Äî –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ –ª–æ–≥–∞—Ö. */
    private static String runId() {
        byte[] b = new byte[4];
        new SecureRandom().nextBytes(b);
        return HexFormat.of().formatHex(b);
    }

    // =========================================================================================
    // –ü–ï–†–ï–ì–†–£–ó–ö–ò –ü–û–î –¢–í–û–ô –í–´–ó–û–í –ò –£–î–û–ë–°–¢–í–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
    // =========================================================================================

    /**
     * –¢–í–û–ô –§–û–†–ú–ê–¢ –í–´–ó–û–í–ê (–∏–∑ TelegramBotHandler):
     *   rangeDrainService.startDrainInRange(chatId, symbol, low, high, usdt);
     */
    public void startDrainInRange(Long chatId,
                                  String symbol,
                                  BigDecimal rangeLow,
                                  BigDecimal rangeHigh,
                                  BigDecimal targetUsdt) {
        startDrainInRange(symbol, rangeLow, rangeHigh, targetUsdt, chatId, 50);
    }

    /**
     * –¢–∞ –∂–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞, –Ω–æ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ª–∏–º–∏—Ç–æ–º —à–∞–≥–æ–≤.
     */
    public void startDrainInRange(Long chatId,
                                  String symbol,
                                  BigDecimal rangeLow,
                                  BigDecimal rangeHigh,
                                  BigDecimal targetUsdt,
                                  int maxSteps) {
        startDrainInRange(symbol, rangeLow, rangeHigh, targetUsdt, chatId, maxSteps);
    }

    // =========================================================================================
    // –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î (—è–¥—Ä–æ)
    // =========================================================================================

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–ª–∏–≤–∞ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø—Ä–µ–¥–∞).
     */
    public void startDrainInRange(String symbol,
                                  BigDecimal rangeLow,
                                  BigDecimal rangeHigh,
                                  BigDecimal targetUsdt,
                                  Long chatId,
                                  int maxSteps) {

        // ---------- –í–∞–ª–∏–¥–∞—Ü–∏—è ----------
        if (symbol == null || rangeLow == null || rangeHigh == null || targetUsdt == null) {
            throw new IllegalArgumentException("–ü—É—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–ª–∏–≤–∞");
        }
        symbol = symbol.trim().toUpperCase();

        rangeLow  = rangeLow.stripTrailingZeros();
        rangeHigh = rangeHigh.stripTrailingZeros();

        if (rangeLow.compareTo(ZERO) <= 0 || rangeHigh.compareTo(rangeLow) <= 0) {
            throw new IllegalArgumentException("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: " + rangeLow + " .. " + rangeHigh);
        }
        if (targetUsdt.compareTo(new BigDecimal("0.50")) < 0) {
            log.warn("‚ö†Ô∏è targetUsdt={} —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã —Ö–æ–ª–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.",
                    targetUsdt.stripTrailingZeros().toPlainString());
        }

        final String rid = runId();
        final BigDecimal sellPrice = rangeLow;   // –Ω–∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        final BigDecimal buyPrice  = rangeHigh;  // –≤–µ—Ä—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        final BigDecimal delta     = buyPrice.subtract(sellPrice);

        if (delta.compareTo(ZERO) <= 0) {
            throw new IllegalArgumentException("–í–µ—Ä—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ –Ω–∏–∑–∞ (delta <= 0).");
        }

        log.info("üöÄ [{}] RANGE start: symbol={} | range=[{}..{}] | target={} USDT",
                rid, symbol,
                sellPrice.toPlainString(),
                buyPrice.toPlainString(),
                targetUsdt.stripTrailingZeros().toPlainString());

        BigDecimal drainedUsdt = ZERO; // –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ ¬´–ø–µ—Ä–µ–ª–∏—Ç–æ¬ª
        int step = 0;

        // ---------- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ----------
        while (drainedUsdt.compareTo(targetUsdt) < 0 && step < Math.max(1, maxSteps)) {
            step++;

            // –°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏–º ¬´–ø—Ä–æ–¥–∞—Ç—å –Ω–∞ A¬ª –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ, —á—Ç–æ–±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ —Ü–µ–ª–∏?
            // –ü–ª–∞–Ω ‚âà floor( (target - drained) / sellPrice )
            BigDecimal remaining = targetUsdt.subtract(drainedUsdt);
            BigDecimal planQty = safeFloor(remaining.divide(sellPrice, 18, RoundingMode.DOWN));
            if (planQty.compareTo(ZERO) <= 0) {
                planQty = BigDecimal.ONE; // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ 1 ¬´—à–∞–≥–æ–≤–∞—è¬ª –µ–¥–∏–Ω–∏—Ü–∞ (—á–∞—Å—Ç–æ stepSize=1)
            }

            // –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ A
            BigDecimal balanceA = mexc.getTokenBalanceAccountA(symbol, chatId).stripTrailingZeros();

            // –ü–æ–¥—Å–µ–≤ –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ A
            if (balanceA.compareTo(planQty) < 0) {
                BigDecimal deficit = planQty.subtract(balanceA);
                if (deficit.compareTo(BigDecimal.ONE) < 0) deficit = BigDecimal.ONE;

                BigDecimal seedBudget = buyPrice.multiply(deficit).multiply(SEED_BUDGET_K);
                log.info("({}) [{}] SEED: –¥–æ–∫—É–ø–∞—é –Ω–∞ A deficitQty={} –ø–æ –±—é–¥–∂–µ—Ç—É~{} (buyPrice={})",
                        (step - 1), rid,
                        deficit.stripTrailingZeros().toPlainString(),
                        seedBudget.stripTrailingZeros().toPlainString(),
                        buyPrice.toPlainString());

                boolean seeded = false;
                for (int tr = 1; tr <= SEED_MAX_RETRIES; tr++) {
                    var info = mexc.limitBuyAboveSpreadAccountA(symbol, seedBudget, chatId);
                    log.info("({}) [{}] SEED result: status={} executedQty={} avgPrice={}",
                            (step - 1), rid,
                            info.status(),
                            info.executedQty().stripTrailingZeros().toPlainString(),
                            info.avgPrice().stripTrailingZeros().toPlainString());
                    if (info.executedQty().compareTo(ZERO) > 0) {
                        seeded = true;
                        break;
                    }
                    sleepQuiet(250L);
                }
                if (!seeded) {
                    log.warn("({}) [{}] SEED: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω (–Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è). –ü—Ä–µ—Ä—ã–≤–∞—é.",
                            (step - 1), rid);
                    break;
                }
                // –æ–±–Ω–æ–≤–∏–º –±–∞–ª–∞–Ω—Å
                balanceA = mexc.getTokenBalanceAccountA(symbol, chatId).stripTrailingZeros();
            }

            // –ó–∞—â–∏—Ç–∞ –æ—Ç oversold ‚Äî –Ω–µ –ø—Ä–æ–¥–∞—ë–º –±–æ–ª—å—à–µ, —á–µ–º —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –Ω–∞ A
            BigDecimal qty = planQty.min(balanceA);
            if (qty.compareTo(planQty) < 0) {
                log.warn("({}) [{}] Oversold-guard: –ø–ª–∞–Ω={} > –±–∞–ª–∞–Ω—ÅA={} ‚áí –ø—Ä–æ–¥–∞—é {}",
                        step, rid,
                        planQty.stripTrailingZeros().toPlainString(),
                        balanceA.stripTrailingZeros().toPlainString(),
                        qty.stripTrailingZeros().toPlainString());
            }

            // –ü–ª–∞–Ω —à–∞–≥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ, —è—Å–Ω–æ –≤ –ª–æ–≥–∞—Ö
            log.info("({}) [{}] –ü–ª–∞–Ω —à–∞–≥–∞: sell={} buy={} delta={} qty={} remaining={}",
                    step, rid,
                    sellPrice.toPlainString(),
                    buyPrice.toPlainString(),
                    delta.stripTrailingZeros().toPlainString(),
                    qty.stripTrailingZeros().toPlainString(),
                    remaining.stripTrailingZeros().toPlainString());

            // 1) A: LIMIT SELL @ low
            String sellOrderId = mexc.placeLimitSellAccountA(symbol, sellPrice, qty, chatId);
            if (sellOrderId == null) {
                log.warn("({}) [{}] A SELL –Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω (minNotional/minQty/–≤–∞–ª–∏–¥–∞—Ü–∏—è). –ü—Ä–µ—Ä—ã–≤–∞—é.", step, rid);
                break;
            }
            log.info("({}) [{}] A ‚û° SELL –ª–∏–º–∏—Ç–∫–∞ qty={} @ {} (orderId={})",
                    step, rid,
                    qty.stripTrailingZeros().toPlainString(),
                    sellPrice.toPlainString(),
                    sellOrderId);

            // 2) B: MARKET BUY ~ qty @ low
            mexc.marketBuyFromAccountB(symbol, sellPrice, qty, chatId);
            log.info("({}) [{}] B ‚û° BUY market ~{} @ {}",
                    step, rid,
                    qty.stripTrailingZeros().toPlainString(),
                    sellPrice.toPlainString());

            // 3) A: LIMIT BUY @ high (–±—é–¥–∂–µ—Ç ‚âà qty * high, maxQty = qty)
            BigDecimal budgetA = qty.multiply(buyPrice);
            BigDecimal makerBudget = mexc.reserveForMakerFee(budgetA);
            String buyOrderId = mexc.placeLimitBuyAccountA(symbol, buyPrice, makerBudget, qty, chatId);
            if (buyOrderId == null) {
                log.warn("({}) [{}] A BUY –Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω (minNotional/minQty/–≤–∞–ª–∏–¥–∞—Ü–∏—è). –ü—Ä–µ—Ä—ã–≤–∞—é.", step, rid);
                break;
            }
            log.info("({}) [{}] A ‚û° BUY –ª–∏–º–∏—Ç–∫–∞ maxQty={} @ {} (orderId={})",
                    step, rid,
                    qty.stripTrailingZeros().toPlainString(),
                    buyPrice.toPlainString(),
                    buyOrderId);

            // 4) B: MARKET SELL ~ qty @ high
            mexc.marketSellFromAccountB(symbol, buyPrice, qty, chatId);
            log.info("({}) [{}] B ‚û° SELL market ~{} @ {}",
                    step, rid,
                    qty.stripTrailingZeros().toPlainString(),
                    buyPrice.toPlainString());

            // –ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è ¬´–ø–µ—Ä–µ–ª–∏—Ç–æ–≥–æ¬ª –∑–∞ —à–∞–≥
            BigDecimal stepDrained = delta.multiply(qty);
            drainedUsdt = drainedUsdt.add(stepDrained);

            log.info("({}) [{}] –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω: ~–ø–µ—Ä–µ–ª–∏—Ç–æ {} USDT (–∏—Ç–æ–≥–æ {} / {})",
                    step, rid,
                    stepDrained.stripTrailingZeros().toPlainString(),
                    drainedUsdt.stripTrailingZeros().toPlainString(),
                    targetUsdt.stripTrailingZeros().toPlainString());

            sleepQuiet(STEP_SLEEP_MS);
        }

        if (drainedUsdt.compareTo(targetUsdt) >= 0) {
            log.info("‚úÖ [{}] RANGE done. –ò—Ç–æ–≥ ~{} / {} USDT",
                    rid,
                    drainedUsdt.stripTrailingZeros().toPlainString(),
                    targetUsdt.stripTrailingZeros().toPlainString());
        } else {
            log.warn("üü° [{}] RANGE stopped. –ò—Ç–æ–≥ ~{} / {} USDT (steps={}/{})",
                    rid,
                    drainedUsdt.stripTrailingZeros().toPlainString(),
                    targetUsdt.stripTrailingZeros().toPlainString(),
                    step, maxSteps);
        }
    }

    // =========================================================================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï
    // =========================================================================================

    /** –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è qty ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ü–µ–ª—É—é —á–∞—Å—Ç—å (—á–∞—Å—Ç–æ stepSize=1). */
    private static BigDecimal safeFloor(BigDecimal v) {
        if (v == null) return ZERO;
        if (v.signum() <= 0) return ZERO;
        return v.setScale(0, RoundingMode.DOWN).stripTrailingZeros();
    }

    private static void sleepQuiet(long ms) {
        try { Thread.sleep(ms); } catch (InterruptedException ignored) { }
    }
}
