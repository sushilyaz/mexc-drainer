package com.suhoi.mexcdrainer.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.Duration;
import java.util.Objects;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;

import static java.math.BigDecimal.ZERO;

/**
 * –ü–µ—Ä–µ–ª–∏–≤ –≤ –ó–ê–î–ê–ù–ù–û–ú –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ü–µ–Ω [rangeLow; rangeHigh].
 * –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—ã—á–Ω–æ–≥–æ DrainService (SEED + –¥–≤–µ "–Ω–æ–≥–∏"), –Ω–æ:
 * - —Å—Ç—Ä–æ–≥–æ –¥–µ—Ä–∂–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (—Ü–µ–Ω—ã A SELL/BUY),
 * - –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–ª–∏–∫–æ–º –ª–µ–∂–∏—Ç –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ [bid; ask] –∏ —Å–ø—Ä–µ–¥ —à–∏—Ä–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞,
 * - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π (–¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–æ–º —Å–ø—Ä–µ–¥–∞).
 * <p>
 * –ò—Ç–µ—Ä–∞—Ü–∏—è —à–∞–≥–∞:
 * 1) A: LIMIT-SELL –Ω–∞ –Ω–∏–∂–Ω–µ–π –∫—Ä–æ–º–∫–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (ceil –ø–æ —Ç–∏–∫-—Å–µ—Ç–∫–µ)
 * 2) B: MARKET-BUY –≤ —ç—Ç—É –∑–∞—è–≤–∫—É (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ)
 * 3) A: LIMIT-BUY –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π –∫—Ä–æ–º–∫–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (floor –ø–æ —Ç–∏–∫-—Å–µ—Ç–∫–µ, –ª–∏–º–∏—Ç —Å –±—é–¥–∂–µ—Ç–æ–º –∏ maxQty = qty)
 * 4) B: MARKET-SELL –≤ —ç—Ç—É –∑–∞—è–≤–∫—É (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ)
 * <p>
 * –£—á—ë—Ç "–ø–µ—Ä–µ–ª–∏—Ç–æ–π" —Å—É–º–º—ã –≤–µ–¥—ë–º –æ—Ü–µ–Ω–æ—á–Ω–æ: (buyPrice - sellPrice) * qty.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class RangeDrainService {

    // ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Å–µ–±—è) =====
    /**
     * –ü–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —á–∞—Å—Ç–æ—Ç—ã —á—Ç–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞.
     */
    private static final Duration MONITOR_PERIOD = Duration.ofMillis(300);
    /**
     * "–¢–∏–∫–æ–≤–∞—è" –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (0..3).
     */
    private static final int MONITOR_TICK_SAFETY = 1;
    /**
     * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç USDT –Ω–∞ –æ–¥–∏–Ω –º–∏–∫—Ä–æ—à–∞–≥ (–∫–∞–∫ –∏ –≤ –æ–±—ã—á–Ω–æ–º –ø–µ—Ä–µ–ª–∏–≤–µ, —á—Ç–æ–±—ã –Ω–µ –¥–æ–ª–±–∏—Ç—å —Ä—ã–Ω–æ–∫).
     */
    private static final BigDecimal MAX_STEP_USDT = new BigDecimal("5");
    /**
     * –ó–∞–ø–∞—Å –∫ –ø–ª–∞–Ω–æ–≤–æ–º—É qty –æ—Ç "–æ—Å—Ç–∞—Ç–∫–∞ —Ü–µ–ª–∏" (~2%).
     */
    private static final BigDecimal PLAN_QTY_SAFETY = new BigDecimal("0.98");
    /**
     * –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏.
     */
    private static final long SLEEP_MS = 250L;
    /**
     * –ó–∞–ø–∞—Å –∫ –±—é–¥–∂–µ—Ç—É SEED-–¥–æ–∫—É–ø–∫–∏ (—É—á—ë—Ç ask+—Ç–∏–∫–∏ –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è).
     */
    private static final BigDecimal SEED_SAFETY = new BigDecimal("1.03");

    private final MexcTradeService mexc;
    private final SpreadMonitorService monitor;

    // –ø—Ä–æ—Å—Ç–æ–π unsigned –∫–ª–∏–µ–Ω—Ç –¥–ª—è bookTicker
    private final RestTemplate rest = new RestTemplate();
    private final ObjectMapper om = new ObjectMapper();

    /**
     * –ë–õ–û–ö–ò–†–£–Æ–©–ò–ô –∑–∞–ø—É—Å–∫. –í –±–æ—Ç–µ –≤—ã–∑—ã–≤–∞–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
     */
    public void startDrainInRange(Long chatId,
                                  String symbol,
                                  BigDecimal rangeLow,
                                  BigDecimal rangeHigh,
                                  BigDecimal targetUsdt) {

        final String session = UUID.randomUUID().toString().substring(0, 8);

        // --- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (chatId == null) throw new IllegalArgumentException("chatId is null");
        if (symbol == null || symbol.isBlank()) throw new IllegalArgumentException("symbol is blank");
        if (rangeLow == null || rangeHigh == null || targetUsdt == null)
            throw new IllegalArgumentException("rangeLow/rangeHigh/targetUsdt must be non-null");
        if (rangeLow.compareTo(ZERO) <= 0 || rangeHigh.compareTo(ZERO) <= 0 || rangeLow.compareTo(rangeHigh) >= 0)
            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: " + rangeLow + " .. " + rangeHigh);
        if (targetUsdt.compareTo(new BigDecimal("1")) < 0)
            throw new IllegalArgumentException("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è —Ü–µ–ª—å (–º–∏–Ω–∏–º—É–º ~1 USDT): " + targetUsdt);

        final BigDecimal low = strip(rangeLow);
        final BigDecimal high = strip(rangeHigh);
        final BigDecimal target = strip(targetUsdt);

        log.info("üöÄ [{}] RANGE start: symbol={} | range=[{}..{}] | target={} USDT",
                session, symbol, low, high, target);

        // --- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞ (–∞–≤—Ç–æ-—Å—Ç–æ–ø –ø—Ä–∏ —Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏–∏)
        AtomicBoolean stop = new AtomicBoolean(false);
        var handle = monitor.startMonitor(
                new SpreadMonitorService.MonitorConfig(
                        symbol, low, high, MONITOR_PERIOD, MONITOR_TICK_SAFETY, true, chatId
                ),
                snap -> {
                    stop.set(true);
                    log.warn("üõë [{}] Monitor stop: bid={} ask={} spread={}",
                            session, strip(snap.getBid()), strip(snap.getAsk()), strip(snap.getSpread()));
                }
        );

        try {
            // === SEED: –¥–æ–∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ A –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º –ø–µ—Ä–µ–ª–∏–≤–µ)
            seedIfNeeded(chatId, symbol, low, high, session, stop);

            // === –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
            BigDecimal transferred = ZERO; // –æ—Ü–µ–Ω–æ—á–Ω–æ "–ø–µ—Ä–µ–ª–∏—Ç–æ" USDT
            int step = 0;

            while (!stop.get() && transferred.compareTo(target) < 0) {
                step++;

                // 1) –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞–∫–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞/—Å–ø—Ä–µ–¥–∞
                var book = fetchBook(symbol);
                if (book == null || book.bid.signum() <= 0 || book.ask.signum() <= 0) {
                    log.warn("({}) [{}] –ü—É—Å—Ç–æ–π —Å—Ç–∞–∫–∞–Ω, –ø–∞—É–∑–∞ {}ms", step, session, SLEEP_MS);
                    sleep(SLEEP_MS);
                    continue;
                }
                if (!rangeInsideSpread(low, high, book.bid, book.ask)) {
                    log.warn("({}) [{}] –î–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä–µ–¥–∞ (bid={} ask={} spread={} vs band={}). –°—Ç–æ–ø.",
                            step, session,
                            strip(book.bid), strip(book.ask),
                            strip(book.ask.subtract(book.bid)), strip(high.subtract(low)));
                    break;
                }

                // 2) –¶–µ–Ω—ã –≤–Ω—É—Ç—Ä–∏ [low; high] ‚à© [bid; ask], –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∫ —Å–µ—Ç–∫–µ
                BigDecimal innerLow = max(low, book.bid);
                BigDecimal innerHigh = min(high, book.ask);

                BigDecimal sellPrice = mexc.alignPriceCeil(symbol, innerLow);   // –Ω–∏–∂–Ω—è—è –∫—Ä–æ–º–∫–∞ –¥–ª—è SELL A
                BigDecimal buyPrice = mexc.alignPriceFloor(symbol, innerHigh); // –≤–µ—Ä—Ö–Ω—è—è –∫—Ä–æ–º–∫–∞ –¥–ª—è BUY A
                if (sellPrice.compareTo(buyPrice) >= 0) {
                    log.warn("({}) [{}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã –ø–æ—Å–ª–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è: sell={} buy={}",
                            step, session, strip(sellPrice), strip(buyPrice));
                    sleep(200);
                    continue;
                }

                BigDecimal delta = buyPrice.subtract(sellPrice);
                if (delta.signum() <= 0) {
                    log.warn("({}) [{}] delta<=0 (sell={} buy={})", step, session, strip(sellPrice), strip(buyPrice));
                    sleep(200);
                    continue;
                }

                // 3) –ü–ª–∞–Ω–æ–≤—ã–π –æ–±—ä—ë–º —à–∞–≥–∞ (–∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º –ø–µ—Ä–µ–ª–∏–≤–µ: –æ—Å—Ç–∞—Ç–æ–∫/–¥–µ–ª—å—Ç–∞ –∏ –ª–∏–º–∏—Ç –ø–æ –±—é–¥–∂–µ—Ç—É —à–∞–≥–∞)
                BigDecimal remaining = target.subtract(transferred);
                BigDecimal qtyByRemaining = safeDiv(remaining, delta).multiply(PLAN_QTY_SAFETY);
                BigDecimal qtyByStepBudget = safeDiv(MAX_STEP_USDT.min(remaining), sellPrice);

                BigDecimal planQty = mexc.alignQtyFloor(symbol, minPos(qtyByRemaining, qtyByStepBudget));
                if (planQty.compareTo(ZERO) <= 0) {
                    log.warn("({}) [{}] planQty<=0 (remaining={} delta={} sellPrice={}) ‚Äî —Å—Ç–æ–ø.",
                            step, session, strip(remaining), strip(delta), strip(sellPrice));
                    break;
                }

                // 4) Guard –æ—Ç Oversold: –ø–µ—Ä–µ—á–∏—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å A –∏ –æ–±—Ä–µ–∑–∞–ª–∏ qty –¥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
                BigDecimal balA = mexc.getTokenBalanceAccountA(symbol, chatId);
                BigDecimal sellQty = mexc.alignQtyFloor(symbol, min(planQty, balA));
                if (sellQty.compareTo(planQty) < 0) {
                    log.warn("({}) [{}] Oversold-guard: –ø–ª–∞–Ω={} > –±–∞–ª–∞–Ω—ÅA={} ‚áí –ø—Ä–æ–¥–∞—é {}",
                            step, session, strip(planQty), strip(balA), strip(sellQty));
                }
                if (sellQty.signum() <= 0) {
                    // –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–∫—É–ø–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–º–∏–∫—Ä–æ-SEED) –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–∞ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    BigDecimal deficit = planQty.subtract(balA).max(new BigDecimal("0.0"));
                    if (deficit.signum() > 0) {
                        BigDecimal estBudget = buyPrice.multiply(deficit).multiply(SEED_SAFETY).max(new BigDecimal("1"));
                        log.info("({}) [{}] –ú–∏–∫—Ä–æ-SEED: deficitQty={} budget~{} (buyPrice={})",
                                step, session, strip(deficit), strip(estBudget), strip(buyPrice));
                        var seedOrder = mexc.limitBuyAboveSpreadAccountA(symbol, estBudget, chatId);
                        log.info("({}) [{}] –ú–∏–∫—Ä–æ-SEED result: status={} executedQty={} avgPrice={}",
                                step, session, seedOrder.status(), strip(seedOrder.executedQty()), strip(seedOrder.avgPrice()));
                    }
                    sleep(200);
                    continue;
                }

                log.info("({}) [{}] –ü–ª–∞–Ω —à–∞–≥–∞: sell={} buy={} delta={} qty={} remaining={}",
                        step, session, strip(sellPrice), strip(buyPrice), strip(delta), strip(sellQty), strip(remaining));

                // === –ù–û–ì–ê 1: A SELL —É –Ω–∏–∂–Ω–µ–π –∫—Ä–æ–º–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                String sellId = mexc.placeLimitSellAccountA(symbol, sellPrice, sellQty, chatId);
                if (sellId == null) {
                    log.warn("({}) [{}] SELL A –Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω (–≤–µ—Ä–æ—è—Ç–Ω–æ minQty/minNotional). –ü—Ä–æ–ø—É—Å–∫.", step, session);
                    sleep(300);
                    continue;
                }
                log.info("({}) [{}] A ‚û° SELL –ª–∏–º–∏—Ç–∫–∞ qty={} @ {} (orderId={})",
                        step, session, strip(sellQty), strip(sellPrice), sellId);

                // === –ù–û–ì–ê 1b: B MARKET-BUY –Ω–∞ sellQty
                mexc.marketBuyFromAccountB(symbol, sellPrice, sellQty, chatId);
                log.info("({}) [{}] B ‚û° BUY market ~{} @ {}", step, session, strip(sellQty), strip(sellPrice));

                // === –ù–û–ì–ê 2: A BUY —É –≤–µ—Ä—Ö–Ω–µ–π –∫—Ä–æ–º–∫–∏ (–±—é–¥–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º maxQty = sellQty)
                BigDecimal budgetABuy = mexc.reserveForMakerFee(buyPrice.multiply(sellQty));
                String buyId = mexc.placeLimitBuyAccountA(symbol, buyPrice, budgetABuy, sellQty, chatId);
                if (buyId == null) {
                    log.warn("({}) [{}] BUY A –Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω ‚Äî —à–∞–≥ –±–µ–∑ –≤—Ç–æ—Ä–æ–π –Ω–æ–≥–∏.", step, session);
                } else {
                    log.info("({}) [{}] A ‚û° BUY –ª–∏–º–∏—Ç–∫–∞ maxQty={} @ {} (orderId={})",
                            step, session, strip(sellQty), strip(buyPrice), buyId);
                }

                // === –ù–û–ì–ê 2b: B MARKET-SELL –≤ —ç—Ç—É –ª–∏–º–∏—Ç–∫—É
                mexc.marketSellFromAccountB(symbol, buyPrice, sellQty, chatId);
                log.info("({}) [{}] B ‚û° SELL market ~{} @ {}", step, session, strip(sellQty), strip(buyPrice));

                // --- —É—á—ë—Ç ¬´–ø–µ—Ä–µ–ª–∏—Ç–æ–π¬ª —Å—É–º–º—ã –∑–∞ —à–∞–≥
                BigDecimal stepTransferred = delta.multiply(sellQty);
                transferred = transferred.add(stepTransferred);
                log.info("({}) [{}] –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω: ~–ø–µ—Ä–µ–ª–∏—Ç–æ {} USDT (–∏—Ç–æ–≥–æ {} / {})",
                        step, session, strip(stepTransferred), strip(transferred.min(target)), strip(target));

                sleep(SLEEP_MS);
            }

            if (stop.get()) {
                log.warn("üü° [{}] RANGE stopped by spread monitor. –ò—Ç–æ–≥ ~{} / {} USDT",
                        session, strip(transferredOrZero(transferred)), strip(target));
            } else if (transferredOrZero(transferred).compareTo(target) >= 0) {
                log.info("‚úÖ [{}] RANGE done: –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ {} USDT", session, strip(target));
            } else {
                log.warn("üü° [{}] RANGE finished early. –ò—Ç–æ–≥ ~{} / {} USDT",
                        session, strip(transferredOrZero(transferred)), strip(target));
            }

        } finally {
            try {
                handle.close();
            } catch (Exception ignore) {
            }
        }
    }

    // ===== SEED-–±–ª–æ–∫ (–∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º –ø–µ—Ä–µ–ª–∏–≤–µ): –¥–æ–∫—É–ø–∏—Ç—å –º–∏–Ω–∏–º—É–º —Ç–æ–∫–µ–Ω–∞ –Ω–∞ A, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ü–∏–∫–ª =====
    private void seedIfNeeded(Long chatId,
                              String symbol,
                              BigDecimal low,
                              BigDecimal high,
                              String session,
                              AtomicBoolean stop) {
        while (!stop.get()) {
            var book = fetchBook(symbol);
            if (book == null || book.bid.signum() <= 0 || book.ask.signum() <= 0) {
                log.warn("({}) [{}] SEED: –ø—É—Å—Ç–æ–π —Å—Ç–∞–∫–∞–Ω, –ø–∞—É–∑–∞ {}ms", 0, session, SLEEP_MS);
                sleep(SLEEP_MS);
                continue;
            }
            if (!rangeInsideSpread(low, high, book.bid, book.ask)) {
                log.warn("({}) [{}] SEED: –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä–µ–¥–∞ (bid={} ask={}). –°—Ç–∞—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.",
                        0, session, strip(book.bid), strip(book.ask));
                throw new IllegalStateException("–î–∏–∞–ø–∞–∑–æ–Ω –≤–Ω–µ —Å–ø—Ä–µ–¥–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ.");
            }

            BigDecimal innerLow = max(low, book.bid);
            BigDecimal innerHigh = min(high, book.ask);
            BigDecimal sellPrice = mexc.alignPriceCeil(symbol, innerLow);
            BigDecimal buyPrice = mexc.alignPriceFloor(symbol, innerHigh);
            if (sellPrice.compareTo(buyPrice) >= 0) {
                sleep(200);
                continue;
            }

            // –í–æ–∑—å–º—ë–º –Ω–µ–±–æ–ª—å—à–æ–π –±–∞–∑–æ–≤—ã–π seed-–æ–±—ä—ë–º: –ø–æ–ª–æ–≤–∏–Ω–∞ MAX_STEP_USDT –ø–æ –Ω–∏–∂–Ω–µ–π —Ü–µ–Ω–µ
            BigDecimal seedBudget = MAX_STEP_USDT.divide(new BigDecimal("2"), 18, RoundingMode.DOWN);
            BigDecimal seedQtyPlan = mexc.alignQtyFloor(symbol, safeDiv(seedBudget, sellPrice));
            if (seedQtyPlan.compareTo(ZERO) <= 0) {
                seedBudget = new BigDecimal("1");
                seedQtyPlan = mexc.alignQtyFloor(symbol, safeDiv(seedBudget, sellPrice));
                if (seedQtyPlan.compareTo(ZERO) <= 0) break; // –Ω–µ—á–µ–≥–æ —Å–µ—è—Ç—å ‚Äî –ø—É—Å—Ç—å —Ü–∏–∫–ª —Å–∞–º –¥–æ–±–µ—Ä—ë—Ç
            }

            BigDecimal balA = mexc.getTokenBalanceAccountA(symbol, chatId);
            if (balA.compareTo(seedQtyPlan) >= 0) {
                log.info("({}) [{}] SEED: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ A: have={} need={}",
                        0, session, strip(balA), strip(seedQtyPlan));
                break;
            }

            BigDecimal deficitQty = seedQtyPlan.subtract(balA);
            BigDecimal estBudget = buyPrice.multiply(deficitQty).multiply(SEED_SAFETY).max(new BigDecimal("1"));

            log.info("({}) [{}] SEED: –¥–æ–∫—É–ø–∞—é –Ω–∞ A deficitQty={} –±—é–¥–∂–µ—Ç~{} (buyPrice={})",
                    0, session, strip(deficitQty), strip(estBudget), strip(buyPrice));

            var seedOrder = mexc.limitBuyAboveSpreadAccountA(symbol, estBudget, chatId);
            log.info("({}) [{}] SEED result: status={} executedQty={} avgPrice={}",
                    0, session, seedOrder.status(), strip(seedOrder.executedQty()), strip(seedOrder.avgPrice()));
            break; // –¥–∞–∂–µ –µ—Å–ª–∏ –∫—É–ø–∏–ª–∏ –º–µ–Ω—å—à–µ ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–æ—Å–µ–µ—Ç –º–∏–∫—Ä–æ-SEED–æ–º
        }
    }

    // ===== helpers =====

    private record Book(BigDecimal bid, BigDecimal ask) {
    }

    private Book fetchBook(String symbol) {
        try {
            String url = "https://api.mexc.com/api/v3/ticker/bookTicker?symbol=" + symbol;
            String body = rest.getForObject(url, String.class);
            JsonNode j = om.readTree(Objects.requireNonNull(body));

            BigDecimal bid = new BigDecimal(j.path("bidPrice").asText("0"));
            BigDecimal ask = new BigDecimal(j.path("askPrice").asText("0"));
            if (bid.signum() <= 0 && ask.signum() > 0) bid = ask;
            if (ask.signum() <= 0 && bid.signum() > 0) ask = bid;
            if (bid.signum() <= 0 && ask.signum() <= 0) return null;
            return new Book(bid, ask);
        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è bookTicker {}: {}", symbol, e.getMessage());
            return null;
        }
    }

    private static boolean rangeInsideSpread(BigDecimal low, BigDecimal high, BigDecimal bid, BigDecimal ask) {
        if (bid == null || ask == null) return false;
        BigDecimal spread = ask.subtract(bid);
        BigDecimal band = high.subtract(low);
        return spread.signum() > 0
                && spread.compareTo(band) >= 0
                && bid.compareTo(low) <= 0
                && ask.compareTo(high) >= 0;
    }

    private static BigDecimal safeDiv(BigDecimal num, BigDecimal den) {
        if (num == null || den == null || den.compareTo(ZERO) == 0) return ZERO;
        return num.divide(den, 18, RoundingMode.DOWN);
    }

    private static BigDecimal minPos(BigDecimal a, BigDecimal b) {
        if (a == null || a.compareTo(ZERO) <= 0) return (b == null ? ZERO : b.max(ZERO));
        if (b == null || b.compareTo(ZERO) <= 0) return a.max(ZERO);
        return (a.compareTo(b) <= 0) ? a : b;
    }

    private static BigDecimal min(BigDecimal a, BigDecimal b) {
        return a.compareTo(b) <= 0 ? a : b;
    }

    private static BigDecimal max(BigDecimal a, BigDecimal b) {
        return a.compareTo(b) >= 0 ? a : b;
    }

    private static BigDecimal strip(BigDecimal x) {
        return x.stripTrailingZeros();
    }

    private static BigDecimal transferredOrZero(BigDecimal x) {
        return x == null ? ZERO : x;
    }

    private static void sleep(long ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException ignored) {
        }
    }
}
