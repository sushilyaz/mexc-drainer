package com.suhoi.mexcdrainer.service;

import com.suhoi.mexcdrainer.model.RangeState;
import com.suhoi.mexcdrainer.util.MemoryDb;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.security.SecureRandom;
import java.time.Instant;
import java.util.HexFormat;
import java.util.Objects;

import static java.math.BigDecimal.ZERO;

/**
 * –ü–µ—Ä–µ–ª–∏–≤ USDT –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
 * –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:
 *  - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—ë–º–∞ –Ω–∞ —à–∞–≥ –∏–¥—ë—Ç –ø–æ –±—é–¥–∂–µ—Ç—É —à–∞–≥–∞ (–≤ USDT –Ω–∞ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ),
 *    –∞ –Ω–µ –ø–æ –ø–æ–ø—ã—Ç–∫–µ "–∑–∞–∫—Ä—ã—Ç—å —Ü–µ–ª—å –∑–∞ 1 —à–∞–≥".
 *  - –î–ª—è tiny-—Ü–µ–Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é qty (stepSize/minNotional) ‚â† 0.
 *  - –ê–≤—Ç–æ–ø–∞—É–∑–∞ –Ω–µ –æ—Ç–º–µ–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä–∞ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–±–µ–∑ –≥–æ–Ω–æ–∫).
 *  - –†—É—á–Ω—ã–µ /stop, /continue, /status.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class RangeDrainService {

    private final MexcTradeService mexc;
    private final SpreadMonitorService spread;

    /** –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏, –º—Å (—â–∞–¥–∏–º API/–º–∞—Ç—á–∏–Ω–≥). */
    private static final long STEP_SLEEP_MS = 350L;

    /** –ù–∞–∫–∏–¥–∫–∞ –∫ –±—é–¥–∂–µ—Ç—É SEED-–ø–æ–∫—É–ø–∫–∏ (5%). */
    private static final BigDecimal SEED_BUDGET_K = new BigDecimal("1.05");

    /** –í–µ—Ä—Ö–Ω–∏–π –ª–∏–º–∏—Ç –±—é–¥–∂–µ—Ç–∞ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –≤ USDT –Ω–∞ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥). */
    private static final BigDecimal MAX_STEP_BUDGET_USDT = new BigDecimal("3"); // –ø–æ–¥ —Ç–≤–æ–∏ —Ç–µ—Å—Ç—ã

    private static final boolean AUTO_PAUSE_FROM_SPREAD = false;

    // =========================================================================================
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥ Telegram
    // =========================================================================================

    public void startDrainInRange(Long chatId,
                                  String symbol,
                                  BigDecimal rangeLow,
                                  BigDecimal rangeHigh,
                                  BigDecimal targetUsdt) {
        startDrainInRange(symbol, rangeLow, rangeHigh, targetUsdt, chatId, 50);
    }

    public void startDrainInRange(String symbol,
                                  BigDecimal rangeLow,
                                  BigDecimal rangeHigh,
                                  BigDecimal targetUsdt,
                                  Long chatId,
                                  int maxSteps) {

        Objects.requireNonNull(symbol, "symbol");
        Objects.requireNonNull(rangeLow, "rangeLow");
        Objects.requireNonNull(rangeHigh, "rangeHigh");
        Objects.requireNonNull(targetUsdt, "targetUsdt");

        symbol = symbol.trim().toUpperCase();
        if (rangeHigh.subtract(rangeLow).signum() <= 0) {
            throw new IllegalArgumentException("HIGH –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤—ã—à–µ LOW");
        }

        RangeState init = RangeState.builder()
                .symbol(symbol)
                .rangeLow(rangeLow.stripTrailingZeros())
                .rangeHigh(rangeHigh.stripTrailingZeros())
                .targetUsdt(targetUsdt)
                .drainedUsdt(ZERO)
                .step(0)
                .paused(false)
                .running(true)
                .updatedAt(Instant.now())
                .build();
        MemoryDb.saveNewRangeState(chatId, init);

        final String rid = runId();
        final BigDecimal sellPrice = init.getRangeLow();
        final BigDecimal buyPrice  = init.getRangeHigh();
        final BigDecimal delta     = buyPrice.subtract(sellPrice); // —Ä–∞–∑–Ω–∏—Ü–∞ –≥—Ä–∞–Ω–∏—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞

        // –ú–æ–Ω–∏—Ç–æ—Ä —Å–ø—Ä–µ–¥–∞: —Ç–æ–ª—å–∫–æ –ø–æ–º–µ—á–∞–µ–º paused (–±–µ–∑ –æ—Ç–º–µ–Ω—ã –∏–∑ —ç—Ç–æ–≥–æ –∂–µ –ø–æ—Ç–æ–∫–∞!)
        SpreadMonitorService.MonitorConfig monCfg = new SpreadMonitorService.MonitorConfig(
                symbol, sellPrice, buyPrice,
                java.time.Duration.ofMillis(150),
                1,          // tickSafety
                true,       // excludeSelf
                chatId
        );
        final String symFinal = symbol;
        if (AUTO_PAUSE_FROM_SPREAD) {
            spread.startMonitor(monCfg, snap -> {
                setStatus(chatId, "‚õî –í–∏–ª–∫–∞ –≤—ã—à–ª–∞ –∏–∑ —Å–ø—Ä–µ–¥–∞: bid=" + snap.getBid() + ", ask=" + snap.getAsk());
                requestPause(chatId, symFinal, "–î–∏–∞–ø–∞–∑–æ–Ω –≤—ã—à–µ–ª –∏–∑ —Å–ø—Ä–µ–¥–∞ (bid=" + snap.getBid() + ", ask=" + snap.getAsk() + ")");
            });
        } else {
            // –º–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏, –Ω–æ –±–µ–∑ –∞–≤—Ç–æ–ø–∞—É–∑—ã
            spread.startMonitor(monCfg, snap -> {
                if (log.isDebugEnabled()) {
                    log.debug("SPREAD[{}|{}|NO-AUTOPAUSE] bid={} ask={} spread={} | range=[{}..{}]",
                            symFinal, chatId,
                            snap.getBid(), snap.getAsk(),
                            snap.getAsk().subtract(snap.getBid()),
                            sellPrice, buyPrice);
                }
                // —Å—Ç–∞—Ç—É—Å –ø–∏—Å–∞—Ç—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äî —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                // setStatus(chatId, "üëÄ –ú–æ–Ω–∏—Ç–æ—Ä –±–µ–∑ –∞–≤—Ç–æ–ø–∞—É–∑—ã: bid=" + snap.getBid() + ", ask=" + snap.getAsk());
            });
        }


        log.info("üöÄ [{}] RANGE start: {} [{}/{}], target={} USDT",
                rid, symbol,
                sellPrice.toPlainString(), buyPrice.toPlainString(),
                targetUsdt.stripTrailingZeros().toPlainString());
        setStatus(chatId, "üöÄ –°—Ç–∞—Ä—Ç RANGE: " + symbol + " [" + sellPrice + ".." + buyPrice + "], —Ü–µ–ª—å=" + targetUsdt.stripTrailingZeros());

        BigDecimal drainedUsdt = nz(init.getDrainedUsdt());
        int step = nzInt(init.getStep());

        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while (drainedUsdt.compareTo(targetUsdt) < 0 && step < Math.max(1, maxSteps)) {
            RangeState st = MemoryDb.getRangeState(chatId);
            if (st == null || st.isPaused()) {
                log.warn("‚è∏Ô∏è [{}] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (paused). –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞.", rid);
                break;
            }
            step++;

            // –°–∫–æ–ª—å–∫–æ –µ—â—ë –Ω—É–∂–Ω–æ "–ø–µ—Ä–µ–ª–∏—Ç—å" –∏ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –Ω–∞ —à–∞–≥ –∏—Å–ø–æ–ª—å–∑—É–µ–º
            BigDecimal remaining = targetUsdt.subtract(drainedUsdt);
            BigDecimal stepBudget = remaining.min(MAX_STEP_BUDGET_USDT); // –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç

            // –ü–ª–∞–Ω–∏—Ä—É–µ–º qty –ø–æ –±—é–¥–∂–µ—Ç—É –Ω–∞ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
            BigDecimal planQty = floorPositive(divSafe(stepBudget, sellPrice));

            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º –ø–æ —à–∞–≥—É/–Ω–æ—Ü–∏–æ–Ω–∞–ª—É
            BigDecimal minQtyByStep = mexc.normalizeQtyForSymbol(symbol, BigDecimal.ONE); // –æ–±—ã—á–Ω–æ 1, –µ—Å–ª–∏ stepSize=1
            if (minQtyByStep.signum() <= 0) minQtyByStep = BigDecimal.ONE;               // —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
            BigDecimal minQtyByNotional = mexc.planSellMinQtyForNotional(symbol, sellPrice);
            BigDecimal minQtyRequired = max(minQtyByStep, minQtyByNotional);

            if (planQty.compareTo(minQtyRequired) < 0) {
                planQty = minQtyRequired;
            }

            // –£—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å A; –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ ‚Äî SEED –¥–æ –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            BigDecimal balanceA = mexc.getTokenBalanceAccountA(symbol, chatId).stripTrailingZeros();
            if (balanceA.compareTo(planQty) < 0) {
                boolean seeded = ensureSeed(symbol, buyPrice, planQty, chatId);
                if (!seeded) {
                    requestPause(chatId, symbol, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ A, SEED –Ω–µ —É–¥–∞–ª—Å—è.");
                    break;
                }
                balanceA = mexc.getTokenBalanceAccountA(symbol, chatId).stripTrailingZeros();
                if (balanceA.compareTo(planQty) < 0) {
                    // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Ä–µ–∂–µ–º –¥–æ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å (–ø–æ—Å–ª–µ SEED –¥–æ–ª–∂–Ω–æ —Ö–≤–∞—Ç–∞—Ç—å, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç)
                    planQty = balanceA;
                }
            }

            // –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            BigDecimal qty = mexc.normalizeQtyForSymbol(symbol, planQty);
            if (qty.signum() <= 0) {
                requestPause(chatId, symbol, "–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ qty=0 ‚Äî —à–∞–≥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω (stepSize/minQty).");
                break;
            }

            // === 1) A: LIMIT SELL @ low ===
            String sellOrderId = mexc.placeLimitSellAccountA(symbol, sellPrice, qty, chatId);
            if (sellOrderId == null) {
                requestPause(chatId, symbol, "SELL A –Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω (minNotional/minQty).");
                break;
            }
            if (pausedNow(chatId)) {
                log.warn("({}) [{}] –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ A SELL ‚Äî –æ—Ç–º–µ–Ω—è—é –∏ –≤—ã—Ö–æ–∂—É", step, rid);
                cancelBothSafely(symbol, chatId);
                return;
            }
            log.info("({}) [{}] A SELL placed: id={}, qty={}, price={}",
                    step, rid, sellOrderId, qty.stripTrailingZeros(), sellPrice);
            setStatus(chatId, "A SELL: id=" + sellOrderId + ", qty=" + qty.stripTrailingZeros() + ", price=" + sellPrice);

// === 2) B: MARKET BUY —ç—Ç–æ–π –∂–µ qty (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ) ===
            mexc.marketBuyFromAccountB(symbol, sellPrice, qty, chatId);
            setStatus(chatId, "B BUY: qty=" + qty.stripTrailingZeros() + " @~" + sellPrice);

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ A-SELL –∑–∞–∫—Ä—ã—Ç, –∏ –±–µ—Ä—ë–º —Ä–µ–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ A-BUY
            var credsA = com.suhoi.mexcdrainer.util.MemoryDb.getAccountA(chatId);
            MexcTradeService.OrderInfo sellAInfo = null;
            if (credsA != null) {
                sellAInfo = mexc.waitUntilFilled(symbol, sellOrderId, credsA.getApiKey(), credsA.getSecret(), 6000);
            }
            if (sellAInfo == null || sellAInfo.executedQty().signum() <= 0) {
                requestPause(chatId, symbol, "A SELL –Ω–µ FILLED –∏–ª–∏ executedQty=0 –ø–æ—Å–ª–µ B BUY.");
                break;
            }
            BigDecimal usdtEarned = sellAInfo.cummQuoteQty();

// === 3) A: LIMIT BUY @ high ‚Äî –±—é–¥–∂–µ—Ç —Å—Ç—Ä–æ–≥–æ –æ—Ç usdtEarned ===
            BigDecimal budget = mexc.reserveForMakerFee(usdtEarned);

// –≤—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º—É–º –º–æ–Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –±—é–¥–∂–µ—Ç –ø–æ high
            BigDecimal buyCapByBudget = budget.divide(buyPrice, 18, RoundingMode.DOWN);
            BigDecimal buyCapNorm = mexc.normalizeQtyForSymbol(symbol, buyCapByBudget);
            BigDecimal placedBuyQty = qty.min(buyCapNorm);

// –µ—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—É–ø–∏—Ç—å –Ω–µ—á–µ–≥–æ ‚Äî –ø–∞—É–∑–∞
            if (placedBuyQty.signum() <= 0) {
                requestPause(chatId, symbol, "A BUY: –±—é–¥–∂–µ—Ç –æ—Ç SELL –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫—É–ø–∏—Ç—å ‚â• minQty/minNotional.");
                break;
            }

            String buyOrderId = mexc.placeLimitBuyAccountA(symbol, buyPrice, budget, placedBuyQty, chatId);
            if (buyOrderId == null) {
                requestPause(chatId, symbol, "BUY A –Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω (budget/minNotional).");
                break;
            }
            log.info("({}) [{}] A BUY placed: id={}, maxQty={}, price={}",
                    step, rid, buyOrderId, placedBuyQty.stripTrailingZeros(), buyPrice);
            setStatus(chatId, "A BUY: id=" + buyOrderId + ", maxQty=" + placedBuyQty.stripTrailingZeros() + ", price=" + buyPrice);

// –≤–∞–∂–Ω–æ: –ø–∞—É–∑–∞ –º–æ–≥–ª–∞ —Å–ª—É—á–∏—Ç—å—Å—è –°–ï–ô–ß–ê–° ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—â—ë —Ä–∞–∑ –ø–µ—Ä–µ–¥ B SELL
            if (pausedNow(chatId)) {
                log.warn("({}) [{}] –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ A BUY ‚Äî –æ—Ç–º–µ–Ω—è—é –∏ –≤—ã—Ö–æ–∂—É", step, rid);
                cancelBothSafely(symbol, chatId);
                return;
            }

// === 4) B: MARKET SELL —Ä–æ–≤–Ω–æ –≤ –æ–±—ä—ë–º placedBuyQty ===
            mexc.marketSellFromAccountB(symbol, buyPrice, placedBuyQty, chatId);
            setStatus(chatId, "B SELL: qty=" + placedBuyQty.stripTrailingZeros() + " @~" + buyPrice);

// (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è, —á—Ç–æ A BUY –∑–∞–∫—Ä—ã–ª—Å—è
            MexcTradeService.OrderInfo buyAInfo = null;
            if (credsA != null) {
                buyAInfo = mexc.waitUntilFilled(symbol, buyOrderId, credsA.getApiKey(), credsA.getSecret(), 6000);
            }
            if (buyAInfo == null || buyAInfo.executedQty().signum() <= 0) {
                requestPause(chatId, symbol, "A BUY –Ω–µ FILLED –ø–æ—Å–ª–µ B SELL (–≤–µ—Ä–æ—è—Ç–µ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç/–Ω–∞–∫—Ä—É—Ç).");
                break;
            }

// –ò—Ç–æ–≥ —à–∞–≥–∞: —Å—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–ª–∏–≤ –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –æ–±—ä—ë–º—É, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∑–∞–ª–æ–∂–∏–ª–∏ –≤ BUY
            BigDecimal stepDrained = delta.multiply(placedBuyQty);
            drainedUsdt = drainedUsdt.add(stepDrained);

            int finalStep = step;
            BigDecimal finalDrainedUsdt = drainedUsdt;
            MemoryDb.updateProgress(chatId, s -> {
                if (s == null) return null;
                s.setDrainedUsdt(finalDrainedUsdt);
                s.setStep(finalStep);
                s.setUpdatedAt(Instant.now());
                s.setRunning(true);
                return s;
            });

            log.info("({}) [{}] –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω: ~–ø–µ—Ä–µ–ª–∏—Ç–æ {} USDT (–∏—Ç–æ–≥–æ {} / {})",
                    step, rid,
                    stepDrained.stripTrailingZeros().toPlainString(),
                    drainedUsdt.stripTrailingZeros().toPlainString(),
                    targetUsdt.stripTrailingZeros().toPlainString());

            setStatus(chatId, "‚úÖ –®–∞–≥ " + step + ": +" + stepDrained.stripTrailingZeros()
                    + " USDT (–∏—Ç–æ–≥–æ " + drainedUsdt.stripTrailingZeros() + "/" + targetUsdt.stripTrailingZeros() + ")");
            sleepQuiet(STEP_SLEEP_MS);

        }
    }

    /** /stop ‚Äî –∂—ë—Å—Ç–∫–∞—è –ø–∞—É–∑–∞: —Å–Ω–∏–º–∞–µ–º –ª–∏–º–∏—Ç–∫–∏ A/B, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º. */
    public void stopRange(Long chatId) {
        RangeState st = MemoryDb.getRangeState(chatId);
        if (st == null) return;
        final String symbol = st.getSymbol();
        try { spread.stopMonitor(symbol, chatId); } catch (Exception ignore) {}
        try { mexc.cancelAllOpenOrdersAccountA(symbol, chatId); } catch (Exception ignore) {}
        try { mexc.cancelAllOpenOrdersAccountB(symbol, chatId); } catch (Exception ignore) {}
        MemoryDb.updateProgress(chatId, s -> {
            if (s == null) return null;
            s.setPaused(true);
            s.setRunning(false);
            s.setUpdatedAt(Instant.now());
            return s;
        });
        setStatus(chatId, "‚è∏Ô∏è –ü–∞—É–∑–∞ –ø–æ /stop. –õ–∏–º–∏—Ç–∫–∏ —Å–Ω—è—Ç—ã, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.");
        log.warn("‚è∏Ô∏è [chat={}] STOP: –ª–∏–º–∏—Ç–∫–∏ —Å–Ω—è—Ç—ã, –º–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", chatId);
    }

    /** /continue <LOW> <HIGH> ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –Ω–æ–≤–æ–π –≤–∏–ª–∫–æ–π –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫ —Ü–µ–ª–∏. */
    public void continueRange(Long chatId, BigDecimal newLow, BigDecimal newHigh) {
        RangeState st = MemoryDb.getRangeState(chatId);
        if (st == null) {
            setStatus(chatId, "‚ö†Ô∏è /continue: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ /drain –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ.");
            return;
        }
        if (newLow == null || newHigh == null || newLow.compareTo(newHigh) >= 0) {
            setStatus(chatId, "‚ö†Ô∏è /continue: –Ω–µ–≤–µ—Ä–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞.");
            return;
        }
        final String symbol = st.getSymbol();
        final BigDecimal target = nz(st.getTargetUsdt());
        final BigDecimal drained = nz(st.getDrainedUsdt());
        BigDecimal remaining = target.subtract(drained);
        if (remaining.signum() <= 0) {
            setStatus(chatId, "‚úÖ –ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å: —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (" + drained.stripTrailingZeros() + "/" + target.stripTrailingZeros() + ").");
            return;
        }
        try { spread.stopMonitor(symbol, chatId); } catch (Exception ignore) {}
        try { mexc.cancelAllOpenOrdersAccountA(symbol, chatId); } catch (Exception ignore) {}
        try { mexc.cancelAllOpenOrdersAccountB(symbol, chatId); } catch (Exception ignore) {}

        setStatus(chatId, "‚ñ∂Ô∏è CONTINUE " + symbol + " [" + newLow + " .. " + newHigh + "], –æ—Å—Ç–∞—Ç–æ–∫ ~" + remaining.stripTrailingZeros() + " USDT");
        log.info("‚ñ∂Ô∏è [chat={}] CONTINUE {}: –Ω–æ–≤–∞—è –≤–∏–ª–∫–∞ [{} .. {}], –æ—Å—Ç–∞—Ç–æ–∫ —Ü–µ–ª–∏ ~{} USDT",
                chatId, symbol, newLow.stripTrailingZeros(), newHigh.stripTrailingZeros(), remaining.stripTrailingZeros());

        startDrainInRange(symbol, newLow, newHigh, remaining, chatId, 50);
    }

    /** /status ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å. */
    public String statusText(Long chatId) {
        RangeState s = MemoryDb.getRangeState(chatId);
        if (s == null) return "–°—Ç–∞—Ç—É—Å: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /drain ...";
        StringBuilder sb = new StringBuilder(256);
        sb.append("üìä –°—Ç–∞—Ç—É—Å RANGE\n");
        sb.append("–°–∏–º–≤–æ–ª: ").append(s.getSymbol()).append('\n');
        sb.append("–í–∏–ª–∫–∞: [").append(s.getRangeLow()).append(" .. ").append(s.getRangeHigh()).append("]\n");
        sb.append("–ü—Ä–æ–≥—Ä–µ—Å—Å: ").append(nz(s.getDrainedUsdt()).stripTrailingZeros()).append(" / ")
                .append(nz(s.getTargetUsdt()).stripTrailingZeros()).append(" USDT\n");
        sb.append("–®–∞–≥: ").append(s.getStep()).append('\n');
        sb.append("–°–æ—Å—Ç–æ—è–Ω–∏–µ: ").append(s.isPaused() ? "paused" : (s.isRunning() ? "running" : "idle")).append('\n');
        if (s.getUpdatedAt() != null) sb.append("–û–±–Ω–æ–≤–ª–µ–Ω–æ: ").append(s.getUpdatedAt()).append('\n');
        try {
            var f = RangeState.class.getDeclaredField("statusText");
            f.setAccessible(true);
            Object val = f.get(s);
            if (val != null) sb.append('\n').append(val);
        } catch (Exception ignore) {}
        return sb.toString();
    }

    // =========================================================================================
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã
    // =========================================================================================

    private static String runId() {
        byte[] b = new byte[4];
        new SecureRandom().nextBytes(b);
        return HexFormat.of().formatHex(b);
    }

    private static BigDecimal nz(BigDecimal v) { return v != null ? v : ZERO; }
    private static int nzInt(Integer v) { return v != null ? v : 0; }

    private static BigDecimal divSafe(BigDecimal a, BigDecimal b) {
        if (a == null || b == null || b.signum() == 0) return ZERO;
        return a.divide(b, 18, RoundingMode.HALF_UP);
    }
    private static BigDecimal floorPositive(BigDecimal v) {
        if (v == null || v.signum() <= 0) return ZERO;
        return v.setScale(0, RoundingMode.FLOOR);
    }
    private static BigDecimal max(BigDecimal a, BigDecimal b) { return a.compareTo(b) >= 0 ? a : b; }

    private boolean pausedNow(Long chatId) {
        RangeState s = MemoryDb.getRangeState(chatId);
        return s != null && s.isPaused();
    }

    /** –ü–æ–º–µ—á–∞–µ–º paused + –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä. –û—Ç–º–µ–Ω—É –æ—Ä–¥–µ—Ä–æ–≤ –¥–µ–ª–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫/stopRange. */
    private void requestPause(Long chatId, String symbol, String message) {
        log.warn("‚è∏Ô∏è [chat={}] AUTO-PAUSE: {}", chatId, message);
        setStatus(chatId, "‚è∏Ô∏è –ü–∞—É–∑–∞: " + message);
        spread.stopMonitor(symbol, chatId);
        MemoryDb.updateProgress(chatId, st -> {
            if (st == null) return null;
            st.setPaused(true);
            st.setRunning(false);
            st.setUpdatedAt(Instant.now());
            return st;
        });
    }

    private void cancelBothSafely(String symbol, Long chatId) {
        try { mexc.cancelAllOpenOrdersAccountA(symbol, chatId); } catch (Exception ignore) {}
        try { mexc.cancelAllOpenOrdersAccountB(symbol, chatId); } catch (Exception ignore) {}
    }

    /** SEED: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –Ω–∞ A –±—É–¥–µ—Ç –º–∏–Ω–∏–º—É–º qtyNeed —Ç–æ–∫–µ–Ω–∞. */
    private boolean ensureSeed(String symbol, BigDecimal buyPrice, BigDecimal qtyNeed, Long chatId) {
        BigDecimal balanceA = mexc.getTokenBalanceAccountA(symbol, chatId).stripTrailingZeros();
        if (balanceA.compareTo(qtyNeed) >= 0) return true;

        BigDecimal deficit = qtyNeed.subtract(balanceA);
        if (deficit.signum() <= 0) return true;

        BigDecimal budget = buyPrice.multiply(deficit).multiply(SEED_BUDGET_K);
        try {
            MexcTradeService.OrderInfo m = mexc.marketBuyAccountAFull(symbol, budget, chatId);
            if (m != null && m.executedQty().signum() > 0) return true;
        } catch (Exception ignore) {}

        try {
            MexcTradeService.OrderInfo l = mexc.limitBuyAboveSpreadAccountA(symbol, budget, chatId);
            if (l != null && l.executedQty().signum() > 0) return true;
        } catch (Exception ignore) {}

        return mexc.getTokenBalanceAccountA(symbol, chatId).compareTo(qtyNeed) >= 0;
    }

    /** –ü–∏—à–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å –≤ RangeState.statusText, –µ—Å–ª–∏ –ø–æ–ª–µ –µ—Å—Ç—å. */
    private static void setStatus(Long chatId, String text) {
        try {
            MemoryDb.updateProgress(chatId, st -> {
                if (st == null) return null;
                try {
                    var f = RangeState.class.getDeclaredField("statusText");
                    f.setAccessible(true);
                    f.set(st, text);
                } catch (NoSuchFieldException ignore) {
                    // –ø–æ–ª–µ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                } catch (Exception e) {
                    // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—á–∏–µ —Å–±–æ–∏ —Å—Ç–∞—Ç—É—Å–∞
                }
                st.setUpdatedAt(Instant.now());
                return st;
            });
        } catch (Exception ignore) { }
    }

    private static void sleepQuiet(long ms) {
        try { Thread.sleep(ms); } catch (InterruptedException ie) { Thread.currentThread().interrupt(); }
    }
}
