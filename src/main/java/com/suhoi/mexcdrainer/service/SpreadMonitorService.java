package com.suhoi.mexcdrainer.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.math.BigDecimal;
import java.time.Duration;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.*;
import java.util.function.Consumer;

import static java.math.BigDecimal.ZERO;

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä —Å–ø—Ä–µ–¥–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞:
 *  - RAW: –æ–±—ã—á–Ω—ã–π —Ç–æ–ø —Å—Ç–∞–∫–∞–Ω–∞ (bookTicker)
 *  - EX-SELF: —Ç–æ–ø —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞ –≤—ã—á–µ—Ç–æ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–∫ –ê–∫–∫–∞—É–Ω—Ç–∞ A (—á–µ—Ä–µ–∑ depth + openOrders)
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class SpreadMonitorService {

    private static final String API_BASE = "https://api.mexc.com";
    private static final String TICKER_BOOK = "/api/v3/ticker/bookTicker";

    /** –°–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –≥–ª—É–±–∏–Ω—ã –±–µ—Ä—ë–º –¥–ª—è EX-SELF –æ—Ü–µ–Ω–∫–∏ (REST). */
    private static final int DEPTH_LIMIT = 20;

    private final RestTemplate rest = new RestTemplate();
    private final ObjectMapper om = new ObjectMapper();

    /** –ù—É–∂–µ–Ω –¥–ª—è EX-SELF —Ä–µ–∂–∏–º–∞ (depth + openOrders + —Ä–∞—Å—á—ë—Ç top –±–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫). */
    private final MexcTradeService mexc;

    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(
            1, r -> {
                Thread t = new Thread(r, "spread-monitor");
                t.setDaemon(true);
                return t;
            });

    @Getter
    private final Map<String, MonitorHandle> active = new ConcurrentHashMap<>();

    @Value
    public static class SpreadSnapshot {
        BigDecimal bid;
        BigDecimal ask;
        BigDecimal spread; // ask - bid
        boolean    exSelf; // true –µ—Å–ª–∏ bid/ask –ø–æ—Å—á–∏—Ç–∞–Ω—ã –±–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–∫
    }

    @Value
    public static class MonitorConfig {
        String symbol;
        BigDecimal rangeLow;    // –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        BigDecimal rangeHigh;   // –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        Duration  period;       // –ø–µ—Ä–∏–æ–¥ –æ–ø—Ä–æ—Å–∞
        int       tickSafety;   // "—Ç–∏–∫-–∑–∞–ø–∞—Å" (0..3)
        boolean   excludeSelf;  // —Å—á–∏—Ç–∞—Ç—å —Å–ø—Ä–µ–¥ ¬´–±–µ–∑ —Å–≤–æ–∏—Ö¬ª –ª–∏–º–∏—Ç–æ–∫?
        Long      chatId;       // —á–µ–π A-–∞–∫–∫–∞—É–Ω—Ç –∏—Å–∫–ª—é—á–∞—Ç—å (–¥–ª—è openOrders)
    }

    public static class MonitorHandle implements AutoCloseable {
        private final String key;
        private final ScheduledFuture<?> fut;
        private final Runnable onStop;
        private volatile boolean stopped = false;

        MonitorHandle(String key, ScheduledFuture<?> fut, Runnable onStop) {
            this.key = key;
            this.fut = fut;
            this.onStop = onStop;
        }
        @Override
        public void close() {
            if (stopped) return;
            stopped = true;
            if (fut != null) fut.cancel(true);
            if (onStop != null) onStop.run();
        }
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–∑ —Å–ø—Ä–µ–¥–∞ ‚Äî –≤—ã–∑–æ–≤–µ—Ç onStopCallback –∏ —Å–∞–º–æ—Å—Ç–æ–ø–Ω–µ—Ç—Å—è.
     */
    public MonitorHandle startMonitor(MonitorConfig cfg, Consumer<SpreadSnapshot> onStopCallback) {
        String key = cfg.getSymbol();
        stopMonitor(key); // –µ—Å–ª–∏ —É–∂–µ –±—ã–ª

        long periodMs = Math.max(50, cfg.getPeriod().toMillis());
        ScheduledFuture<?> fut = scheduler.scheduleAtFixedRate(() -> {
            try {
                SpreadSnapshot s = cfg.isExcludeSelf()
                        ? fetchTopExSelf(cfg.getSymbol(), cfg.getChatId())
                        : fetchTopRaw(cfg.getSymbol());

                if (violatesRange(cfg, s)) {
                    log.warn("üõë [{}] –î–∏–∞–ø–∞–∑–æ–Ω {}‚Äì{} –í–´–®–ï–õ –∏–∑ {}—Å–ø—Ä–µ–¥–∞: bid={} ask={} spread={}",
                            cfg.getSymbol(),
                            cfg.getRangeLow().toPlainString(), cfg.getRangeHigh().toPlainString(),
                            s.isExSelf() ? "EX-SELF " : "",
                            s.getBid().toPlainString(), s.getAsk().toPlainString(), s.getSpread().toPlainString());
                    Optional.ofNullable(onStopCallback).ifPresent(cb -> {
                        try { cb.accept(s); } catch (Exception ignore) {}
                    });
                    stopMonitor(key);
                }
            } catch (Exception e) {
                log.error("SpreadMonitor error [{}]: {}", cfg.getSymbol(), e.getMessage());
            }
        }, 0, periodMs, TimeUnit.MILLISECONDS);

        MonitorHandle handle = new MonitorHandle(key, fut, () -> active.remove(key));
        active.put(key, handle);

        log.info("‚ñ∂Ô∏è [{}] –ó–∞–ø—É—Å—Ç–∏–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞: –¥–∏–∞–ø–∞–∑–æ–Ω={}‚Äì{}, –ø–µ—Ä–∏–æ–¥={}ms, —Ä–µ–∂–∏–º={}",
                cfg.getSymbol(),
                cfg.getRangeLow().toPlainString(), cfg.getRangeHigh().toPlainString(),
                periodMs,
                cfg.isExcludeSelf() ? "EX-SELF" : "RAW");
        return handle;
    }

    public void stopMonitor(String symbol) {
        MonitorHandle h = active.remove(symbol);
        if (h != null) {
            try { h.close(); } catch (Exception ignore) {}
            log.info("‚èπ [{}] –û—Å—Ç–∞–Ω–æ–≤–∏–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞", symbol);
        }
    }

    // ===== –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ =====

    /** –û–±—ã—á–Ω—ã–π —Ç–æ–ø —Å—Ç–∞–∫–∞–Ω–∞ (bookTicker). */
    private SpreadSnapshot fetchTopRaw(String symbol) {
        ResponseEntity<String> r = rest.getForEntity(API_BASE + TICKER_BOOK + "?symbol=" + symbol, String.class);
        JsonNode j;
        try { j = om.readTree(Objects.requireNonNull(r.getBody())); }
        catch (Exception e) { throw new RuntimeException("bad json: " + e.getMessage(), e); }

        BigDecimal bid = new BigDecimal(j.path("bidPrice").asText("0"));
        BigDecimal ask = new BigDecimal(j.path("askPrice").asText("0"));
        if (bid.signum() <= 0 && ask.signum() > 0) bid = ask;
        if (ask.signum() <= 0 && bid.signum() > 0) ask = bid;
        if (bid.signum() <= 0 && ask.signum() <= 0) {
            // –º—ë—Ä—Ç–≤—ã–π —Å—Ç–∞–∫–∞–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º spread=0, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
            return new SpreadSnapshot(ZERO, ZERO, ZERO, false);
        }
        return new SpreadSnapshot(bid, ask, ask.subtract(bid), false);
    }

    /**
     * –¢–æ–ø —Å—Ç–∞–∫–∞–Ω–∞ ¬´–±–µ–∑ —Å–≤–æ–∏—Ö –ª–∏–º–∏—Ç–æ–∫¬ª –∞–∫–∫–∞—É–Ω—Ç–∞ A:
     * depth(limit=DEPTH_LIMIT) - openOrders(A) ‚Üí –≤—ã—á–∏—Ç–∞–µ–º —Å–≤–æ–∏ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Ü–µ–Ω–∞—Ö ‚Üí –∏—â–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å netQty>0.
     */
    private SpreadSnapshot fetchTopExSelf(String symbol, Long chatId) {
        try {
            MexcTradeService.TopOfBook tob = mexc.topExcludingSelf(symbol, chatId, DEPTH_LIMIT);
            BigDecimal bid = tob.bid();
            BigDecimal ask = tob.ask();
            if (bid.signum() <= 0 && ask.signum() > 0) bid = ask;
            if (ask.signum() <= 0 && bid.signum() > 0) ask = bid;
            if (bid.signum() <= 0 && ask.signum() <= 0) {
                return new SpreadSnapshot(ZERO, ZERO, ZERO, true);
            }
            return new SpreadSnapshot(bid, ask, ask.subtract(bid), true);
        } catch (Exception e) {
            log.warn("fetchTopExSelf[{}] error: {}", symbol, e.getMessage());
            // —Ñ–æ–ª–±—ç–∫ –Ω–∞ RAW, —á—Ç–æ–±—ã –Ω–µ –≥–ª–æ—Ö–Ω—É—Ç—å
            SpreadSnapshot raw = fetchTopRaw(symbol);
            return new SpreadSnapshot(raw.getBid(), raw.getAsk(), raw.getSpread(), true);
        }
    }

    // ===== –ü—Ä–∞–≤–∏–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ =====

    /** TRUE ‚Üí –Ω–∞–¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è (–¥–∏–∞–ø–∞–∑–æ–Ω –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä–µ–¥–∞). */
    private boolean violatesRange(MonitorConfig cfg, SpreadSnapshot s) {
        if (s.getSpread().signum() <= 0) return true;

        // –£—Å–ª–æ–≤–∏–µ 1: —Å–ø—Ä–µ–¥ —à–∏—Ä–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        BigDecimal bandWidth = cfg.getRangeHigh().subtract(cfg.getRangeLow());
        if (s.getSpread().compareTo(bandWidth) < 0) return true;

        // –£—Å–ª–æ–≤–∏–µ 2: –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω—É—Ç—Ä–∏ [bid; ask], —Å "—Ç–∏–∫-–∑–∞–ø–∞—Å–æ–º" –ø–æ –∫—Ä–∞—è–º
        // tickSafety —Ä–µ–∞–ª–∏–∑—É–µ–º –∫–∞–∫ –¥–æ–ª—é —Å–ø—Ä–µ–¥–∞, —á—Ç–æ–±—ã –Ω–µ –ª–µ–∑—Ç—å –≤ —Ç–∏–∫-–ª–æ–≥–∏–∫—É –∑–¥–µ—Å—å
        BigDecimal pad = s.getSpread().divide(BigDecimal.valueOf(500L), 12, java.math.RoundingMode.HALF_UP)
                .multiply(BigDecimal.valueOf(Math.max(0, Math.min(3, cfg.getTickSafety())))); // ~0.2% —Å–ø—Ä–µ–¥–∞ –Ω–∞ "—Ç–∏–∫"

        boolean inside = s.getBid().subtract(pad).compareTo(cfg.getRangeLow()) <= 0
                && s.getAsk().add(pad).compareTo(cfg.getRangeHigh()) >= 0;

        return !inside;
    }
}
