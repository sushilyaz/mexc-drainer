package com.suhoi.mexcdrainer.service;

import com.suhoi.mexcdrainer.config.AppProperties;
import com.suhoi.mexcdrainer.config.MexcClient;
import com.suhoi.mexcdrainer.dto.*;
import com.suhoi.mexcdrainer.telegram.KeyStore.Keys;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class TransferService {

    private final MexcClient mexc;
    private final AppProperties props;

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–æ—Ç–∏–æ–Ω–∞–ª–∞ –Ω–∞ MEXC (—á–∞—Å—Ç–æ 1 USDT)
    private static final BigDecimal MIN_NOTIONAL_QUOTE = BigDecimal.ONE;

    public String drainAll(long chatId, String symbol, Keys a, Keys b) {
        ExchangeInfoResponse ex = mexc.exchangeInfo(symbol);
        SymbolInfo info = ex.getSymbols().stream()
                .filter(s -> symbol.equalsIgnoreCase(s.getSymbol()))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª: " + symbol));

        final String base = info.getBaseAsset();   // –Ω–∞–ø—Ä. DAOLITY
        final String quote = info.getQuoteAsset(); // USDT

        final int priceScale = info.getQuotePrecision(); // –∑–Ω–∞–∫–æ–≤ –≤ —Ü–µ–Ω–µ
        final int qtyScale   = deriveQtyScale(info);     // –∑–Ω–∞–∫–æ–≤ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ (–Ω–∞—à —Ä–∞—Å—á—ë—Ç)
        final BigDecimal baseStep = BigDecimal.ONE.movePointLeft(Math.max(qtyScale, 0));

        // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ä—ã–Ω–æ—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –ø–æ –∫–≤–æ—Ç–µ ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç, –¥–µ—Ñ–æ–ª—Ç 1
        final BigDecimal minMarketQuote = Optional.ofNullable(info.getQuoteAmountPrecisionMarket())
                .map(TransferService::parseOrZero).filter(v -> v.compareTo(BigDecimal.ZERO) > 0)
                .orElse(MIN_NOTIONAL_QUOTE);

        int cycle = 0;
        BigDecimal totalUsdtMoved = BigDecimal.ZERO;

        while (cycle < props.getMexc().getMaxCycles()) {
            cycle++;

            // –ë–∞–ª–∞–Ω—Å—ã
            AccountInfo accA = mexc.account(a.getApiKey(), a.getSecret());
            AccountInfo accB = mexc.account(b.getApiKey(), b.getSecret());

            BigDecimal aUsdt = free(accA, quote);
            BigDecimal aBase = free(accA, base);
            BigDecimal bUsdt = free(accB, quote);
            BigDecimal bBase = free(accB, base);

            log.info("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞ {} –ø–æ {}", cycle, symbol);
            log.info("‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å—ã: A.{}={}  A.{}={}  |  B.{}={}  B.{}={}",
                    quote, aUsdt, base, aBase, quote, bUsdt, base, bBase);

            // –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
            BookTicker t0 = mexc.bookTicker(symbol);
            BigDecimal bestBid0 = parseOrZero(t0.getBidPrice());
            BigDecimal bestAsk0 = parseOrZero(t0.getAskPrice());

            // –†–µ—à–∞–µ–º, —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –ª–∏ —Å SELL
            boolean haveEnoughBaseQty = aBase.compareTo(baseStep) >= 0;
            boolean haveEnoughBaseNotional = bestBid0.multiply(aBase).setScale(priceScale, RoundingMode.DOWN)
                    .compareTo(MIN_NOTIONAL_QUOTE) >= 0;
            boolean startWithSell = haveEnoughBaseQty && haveEnoughBaseNotional;

            if (!startWithSell && aUsdt.compareTo(minMarketQuote) < 0) {
                log.info("‚õî –ù–∞ A –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ {} –¥–ª—è MARKET BUY ({}<{}) –∏ –Ω–æ—Ç–∏–æ–Ω–∞–ª {} —Å–ª–∏—à–∫–æ–º –º–∞–ª ({}<{}) ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é.",
                        quote, aUsdt, minMarketQuote, base, bestBid0.multiply(aBase), MIN_NOTIONAL_QUOTE);
                break;
            }

            // ==== [1] –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –±–∞–∑–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ ‚Äî —Å—Ä–∞–∑—É SELL –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä–µ–¥–∞, –∏–Ω–∞—á–µ MARKET BUY
            if (!startWithSell) {
                BigDecimal safety = bd(props.getMexc().getSafetySpendPct()); // –Ω–∞–ø—Ä. 0.995
                BigDecimal spend = aUsdt.multiply(safety);

                log.info("üõí A: –ø–æ–∫—É–ø–∞—é –ø–æ —Ä—ã–Ω–∫—É {} –Ω–∞ —Å—É–º–º—É ‚âà {} {} (safety={})", base, spend, quote, safety);
                log.info("‚û°Ô∏è –ü–µ—Ä–µ–¥ MARKET BUY: —Å–≤–æ–±–æ–¥–Ω–æ {}={}, –ø–æ–∫—É–ø–∞—é –Ω–∞ {}", quote, aUsdt, spend);

                OrderResponse r1 = mexc.newOrder(a.getApiKey(), a.getSecret(), NewOrderRequest.builder()
                        .symbol(symbol).side("BUY").type("MARKET")
                        .quoteOrderQty(fmt(spend, priceScale))
                        .newClientOrderId("A_MBUY_" + System.currentTimeMillis())
                        .build());
                log.info("‚úÖ A: MARKET BUY –∏—Å–ø–æ–ª–Ω–µ–Ω, orderId={}", r1.getOrderId());

                // –æ–±–Ω–æ–≤–∏–º –±–∞–ª–∞–Ω—Å A
                accA = mexc.account(a.getApiKey(), a.getSecret());
                aBase = free(accA, base);
                if (aBase.compareTo(baseStep) < 0) {
                    log.info("‚õî –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ A {} —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –æ—Ä–¥–µ—Ä–∞: {} (—à–∞–≥ {})", base, aBase, baseStep);
                    break;
                }
            } else {
                log.info("‚ôªÔ∏è –ù–∞ A —É–∂–µ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ {}={} (step={}, notional@bid={}). –ù–∞—á–∏–Ω–∞—é —Å SELL –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä–µ–¥–∞.",
                        base, aBase, baseStep, bestBid0.multiply(aBase));
            }

            // ==== [2] A: SELL-LIMIT –í–ù–£–¢–†–ò –°–ü–†–ï–î–ê (—É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã)
            InsidePlan askPlan = insideSellPlan(symbol, priceScale);
            BigDecimal sellQty = floorToStep(aBase, baseStep);

            // –ü—Ä–∏–∫–∏–¥—ã–≤–∞–µ–º –Ω–æ—Ç–∏–æ–Ω–∞–ª –ø–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–Ω–µ
            BigDecimal sellNotional = askPlan.startPrice.multiply(sellQty).setScale(priceScale, RoundingMode.DOWN);
            if (sellNotional.compareTo(MIN_NOTIONAL_QUOTE) < 0) {
                log.info("‚õî –ù–æ—Ç–∏–æ–Ω–∞–ª SELL —Å–ª–∏—à–∫–æ–º –º–∞–ª: {} {} (< {} {}), qty={}, price={}. –ü—Ä–æ–ø—É—Å–∫–∞—é SELL.",
                        sellNotional, quote, MIN_NOTIONAL_QUOTE, quote, sellQty, askPlan.startPrice);
            } else {
                log.info("‚û°Ô∏è –ì–æ—Ç–æ–≤–ª—é A: SELL –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä–µ–¥–∞ qty={} {} –Ω–∞ —Ü–µ–Ω–µ —Å—Ç–∞—Ä—Ç={}", sellQty, base, askPlan.startPrice);
                OrderResponse sellOrder = placeUniqueLimitInsideSpread(
                        a.getApiKey(), a.getSecret(), symbol, "SELL", sellQty, qtyToScale(sellQty), askPlan, priceScale, true);

                BigDecimal sellQtyLeft = remainingFor(a.getApiKey(), a.getSecret(), symbol, sellOrder.getOrderId(), sellQty);
                BigDecimal sellPrice   = parseOrZero(sellOrder.getPrice());
                log.info("üì§ A: –≤—ã—Å—Ç–∞–≤–∏–ª SELL –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä–µ–¥–∞ qty={} {} –ø–æ —Ü–µ–Ω–µ {}. –û—Å—Ç–∞—Ç–æ–∫ –∫—Ä–æ—Å—Å–∞={} {}",
                        sellQty, base, sellPrice, sellQtyLeft, base);

                // ==== [3] B: BUY ‚Äî –≤—ã–∫—É–ø–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ª–∏–º–∏—Ç–∫–∏ A
                if (sellQtyLeft.compareTo(BigDecimal.ZERO) > 0) {
                    log.info("ü§ù B: –≤—ã–∫—É–ø–∞—é –ª–∏–º–∏—Ç–∫—É A: qty={} {} –ø–æ —Ü–µ–Ω–µ {}", sellQtyLeft, base, sellPrice);
                    OrderResponse bBuyResp = mexc.newOrder(b.getApiKey(), b.getSecret(), NewOrderRequest.builder()
                            .symbol(symbol).side("BUY").type("LIMIT")
                            .quantity(fmt(sellQtyLeft, qtyToScale(sellQtyLeft)))
                            .price(fmt(sellPrice, priceScale))
                            .newClientOrderId("B_BUY_" + System.currentTimeMillis())
                            .build());
                    log.info("‚úÖ B: BUY –∏—Å–ø–æ–ª–Ω–µ–Ω/–ø—Ä–∏–Ω—è—Ç, orderId={}", bBuyResp.getOrderId());
                } else {
                    log.info("‚ÑπÔ∏è SELL-–ª–∏–º–∏—Ç–∫–∞ A —É–∂–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî —à–∞–≥ —Å B –ø—Ä–æ–ø—É—Å–∫–∞—é");
                }
            }

            // ==== [4] A: BUY-LIMIT –í–ù–£–¢–†–ò –°–ü–†–ï–î–ê (—É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã)
            InsidePlan bidPlan = insideBuyPlan(symbol, priceScale);
            accA = mexc.account(a.getApiKey(), a.getSecret());
            BigDecimal aUsdtAfterSell = free(accA, quote);

            // –±—é–¥–∂–µ—Ç c safety
            BigDecimal safety = bd(props.getMexc().getSafetySpendPct());
            BigDecimal buyPrice = bidPlan.startPrice;

            BigDecimal buyBudget = aUsdtAfterSell.multiply(safety);
            BigDecimal buyQtyRaw = (buyPrice.compareTo(BigDecimal.ZERO) > 0)
                    ? buyBudget.divide(buyPrice, qtyScale + 6, RoundingMode.DOWN)
                    : BigDecimal.ZERO;
            BigDecimal buyQty = floorToStep(buyQtyRaw, baseStep);
            buyQty = fitQtyUnderQuote(aUsdtAfterSell, buyPrice, buyQty, baseStep, priceScale);

            // –ù–æ—Ç–∏–æ–Ω–∞–ª BUY
            BigDecimal reqQuote = buyPrice.multiply(buyQty).setScale(priceScale, RoundingMode.DOWN);
            if (reqQuote.compareTo(MIN_NOTIONAL_QUOTE) < 0) {
                log.info("‚õî –ù–æ—Ç–∏–æ–Ω–∞–ª BUY —Å–ª–∏—à–∫–æ–º –º–∞–ª: {} {} (< {} {}), qty={}, price={}. –ü—Ä–æ–ø—É—Å–∫–∞—é BUY.",
                        reqQuote, quote, MIN_NOTIONAL_QUOTE, quote, buyQty, buyPrice);
            } else {
                log.info("‚û°Ô∏è –ì–æ—Ç–æ–≤–ª—é A: BUY –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä–µ–¥–∞. –°–≤–æ–±–æ–¥–Ω–æ {}={} | –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è ‚âà {} {} –ø—Ä–∏ —Ü–µ–Ω–µ {}. " +
                                "budget={} {}, qty={} {} (step={})",
                        quote, aUsdtAfterSell, reqQuote, quote, buyPrice, buyBudget, quote, buyQty, base, baseStep);

                OrderResponse buyOrder = placeUniqueLimitInsideSpread(
                        a.getApiKey(), a.getSecret(), symbol, "BUY", buyQty, qtyToScale(buyQty), bidPlan, priceScale, false);

                BigDecimal aBuyPrice   = parseOrZero(buyOrder.getPrice());
                BigDecimal aBuyQtyLeft = remainingFor(a.getApiKey(), a.getSecret(), symbol, buyOrder.getOrderId(), buyQty);
                log.info("üì• A: –≤—ã—Å—Ç–∞–≤–∏–ª BUY –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä–µ–¥–∞ qty={} {} –ø–æ —Ü–µ–Ω–µ {}. –û—Å—Ç–∞—Ç–æ–∫ –∫—Ä–æ—Å—Å–∞={} {}",
                        buyQty, base, aBuyPrice, aBuyQtyLeft, base);

                // ==== [5] B: MARKET SELL –≤ BUY-–ª–∏–º–∏—Ç A
                if (aBuyQtyLeft.compareTo(BigDecimal.ZERO) > 0) {
                    accB = mexc.account(b.getApiKey(), b.getSecret());
                    bBase = free(accB, base);
                    BigDecimal sellMarketQty = aBuyQtyLeft.min(floorToStep(bBase, baseStep));

                    if (sellMarketQty.compareTo(BigDecimal.ZERO) > 0) {
                        log.info("üí∏ B: –ø—Ä–æ–¥–∞—é –ø–æ —Ä—ã–Ω–∫—É –≤ BUY A: qty={} {} (—É B free={} {})",
                                sellMarketQty, base, bBase, base);
                        log.info("‚û°Ô∏è –ü–µ—Ä–µ–¥ MARKET SELL B: qty={} {}.", sellMarketQty, base);

                        OrderResponse bSellResp = mexc.newOrder(b.getApiKey(), b.getSecret(), NewOrderRequest.builder()
                                .symbol(symbol).side("SELL").type("MARKET")
                                .quantity(fmt(sellMarketQty, qtyToScale(sellMarketQty)))
                                .newClientOrderId("B_SELL_MKT_" + System.currentTimeMillis())
                                .build());
                        log.info("‚úÖ B: MARKET SELL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω/–∏—Å–ø–æ–ª–Ω–µ–Ω, orderId={}", bSellResp.getOrderId());
                    } else {
                        log.info("‚ÑπÔ∏è –£ B –Ω–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –¥–ª—è —Ä—ã–Ω–æ—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏. –®–∞–≥ —Å B –ø—Ä–æ–ø—É—Å–∫–∞—é.");
                    }

                    // —É—á–µ—Ç –ø–µ—Ä–µ–ª–∏—Ç–æ–≥–æ (–≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞)
                    BigDecimal movedNow = aBuyPrice.multiply(aBuyQtyLeft);
                    totalUsdtMoved = totalUsdtMoved.add(movedNow);
                    log.info("üì¶ –ü–µ—Ä–µ–ª–∏—Ç–æ –∑–∞ —Ü–∏–∫–ª ‚âà {} {} (—á–µ—Ä–µ–∑ –ø–æ–∫—É–ø–∫—É A –ø–æ —Ü–µ–Ω–µ {})", movedNow, quote, aBuyPrice);
                } else {
                    log.info("‚ÑπÔ∏è BUY-–ª–∏–º–∏—Ç–∫–∞ A —É–∂–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî —Ä—ã–Ω–æ—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ B –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
                }
            }

            // –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –ø–æ –∫–æ–Ω—Ü—É —Ü–∏–∫–ª–∞
            accA = mexc.account(a.getApiKey(), a.getSecret());
            log.info("üîÅ –ò—Ç–æ–≥ —Ü–∏–∫–ª–∞ {}: A.{}‚âà{}  A.{}‚âà{}", cycle, quote, free(accA, quote), base, free(accA, base));
        }

        log.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drain: —Ü–∏–∫–ª–æ–≤={}, —Å—É–º–º–∞—Ä–Ω–æ –ø–µ—Ä–µ–ª–∏—Ç–æ‚âà{} {}", cycle, totalUsdtMoved, quote);
        return "cycles=" + cycle + ", moved‚âà" + totalUsdtMoved + " " + quote;
    }

    // ===================== –í–´–ë–û–† –¶–ï–ù –í–ù–£–¢–†–ò –°–ü–†–ï–î–ê =====================

    /** –ü–ª–∞–Ω –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä–µ–¥–∞. */
    record InsidePlan(BigDecimal startPrice, BigDecimal tick, BigDecimal minInside, BigDecimal maxInside) {}

    /** SELL: bestBid + tick .. ask - tick (–∏–ª–∏ ask, –µ—Å–ª–∏ —Å–ø—Ä–µ–¥ = 1 —Ç–∏–∫). */
    private InsidePlan insideSellPlan(String symbol, int priceScale) {
        BookTicker t = mexc.bookTicker(symbol);
        BigDecimal bid = parseOrZero(t.getBidPrice());
        BigDecimal ask = parseOrZero(t.getAskPrice());
        BigDecimal tick = tickFromBook(symbol);

        BigDecimal minInside = bid.add(tick).setScale(priceScale, RoundingMode.DOWN);
        BigDecimal regularMaxInside = ask.subtract(tick).setScale(priceScale, RoundingMode.DOWN);
        BigDecimal maxInside = (regularMaxInside.compareTo(minInside) >= 0) ? regularMaxInside : ask;
        BigDecimal start = minInside.min(maxInside);
        return new InsidePlan(start, tick, minInside, maxInside);
    }

    /** BUY: ask - tick .. bid + tick (–∏–ª–∏ bid, –µ—Å–ª–∏ —Å–ø—Ä–µ–¥ = 1 —Ç–∏–∫). */
    private InsidePlan insideBuyPlan(String symbol, int priceScale) {
        BookTicker t = mexc.bookTicker(symbol);
        BigDecimal bid = parseOrZero(t.getBidPrice());
        BigDecimal ask = parseOrZero(t.getAskPrice());
        BigDecimal tick = tickFromBook(symbol);

        BigDecimal maxInside = ask.subtract(tick).setScale(priceScale, RoundingMode.DOWN);
        BigDecimal regularMinInside = bid.add(tick).setScale(priceScale, RoundingMode.DOWN);
        BigDecimal minInside = (regularMinInside.compareTo(maxInside) <= 0) ? regularMinInside : bid;
        BigDecimal start = maxInside.max(minInside);
        return new InsidePlan(start, tick, minInside, maxInside);
    }

    // ===================== –ü–û–°–¢–ê–ù–û–í–ö–ê –ò –ü–ï–†–ï–°–¢–ê–ù–û–í–ö–ê –í–ù–£–¢–†–ò –°–ü–†–ï–î–ê =====================

    private OrderResponse placeUniqueLimitInsideSpread(
            String apiKey, String secret, String symbol, String side,
            BigDecimal qty, int qtyScaleForThisQty, InsidePlan plan, int priceScale, boolean askSide) {

        int reposts = 0;
        BigDecimal currentPrice = plan.startPrice;

        while (true) {
            // –õ–û–ì –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
            BigDecimal reqQuoteLog = askSide ? BigDecimal.ZERO
                    : currentPrice.multiply(qty).setScale(priceScale, RoundingMode.DOWN);
            log.info("‚û°Ô∏è –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π {}(inside): qty={} –ø–æ —Ü–µ–Ω–µ {}. –¢—Ä–µ–±—É–µ—Ç—Å—è ‚âà {} {}",
                    side, qty, currentPrice, reqQuoteLog, askSide ? "" : "USDT");

            OrderResponse placed = mexc.newOrder(apiKey, secret, NewOrderRequest.builder()
                    .symbol(symbol).side(side).type("LIMIT")
                    .quantity(fmt(qty, qtyScaleForThisQty))
                    .price(fmt(currentPrice, priceScale))
                    .newClientOrderId(side.charAt(0) + "_LIM_" + System.currentTimeMillis())
                    .build());
            String orderId = placed.getOrderId();

            log.info("üìå {}(inside): –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∏–º–∏—Ç–∫—É orderId={} qty={} –ø–æ —Ü–µ–Ω–µ {}", side, orderId, qty, currentPrice);

            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ¬´—Ç–æ–ª—å–∫–æ –º–æ–π¬ª
            while (true) {
                try { Thread.sleep(props.getMexc().getPollMs()); } catch (InterruptedException ignored) {}

                var openOpt = mexc.openOrders(apiKey, secret, symbol).stream()
                        .filter(o -> orderId.equals(o.getOrderId()))
                        .findFirst();
                if (openOpt.isEmpty()) {
                    log.info("‚úÖ –õ–∏–º–∏—Ç–∫–∞ orderId={} –∏—Å–ø–æ–ª–Ω–∏–ª–∞—Å—å/—Å–Ω—è—Ç–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞—é", orderId);
                    return placed;
                }

                OpenOrder open = openOpt.get();
                BigDecimal myRemain = parseOrZero(open.getOrigQty()).subtract(parseOrZero(open.getExecutedQty()));

                Depth d = mexc.depth(symbol, 20);
                BigDecimal levelQty = side.equals("SELL")
                        ? levelQty(d.getAsks(), currentPrice)
                        : levelQty(d.getBids(), currentPrice);

                boolean onlyMine = levelQty.compareTo(myRemain) == 0;
                if (onlyMine) {
                    log.info("üß≠ –ù–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–µ {} —Ç–æ–ª—å–∫–æ –º–æ–π –æ–±—ä—ë–º {} ‚Äî –æ—Å—Ç–∞–≤–ª—è—é.", currentPrice, myRemain);
                    return placed;
                }

                // –ü–æ–¥—Å–∞–¥–∫–∞ ‚Äî –¥–≤–∏–≥–∞–µ–º –∫ —Ü–µ–Ω—Ç—Ä—É
                BookTicker t = mexc.bookTicker(symbol);
                BigDecimal bid = parseOrZero(t.getBidPrice());
                BigDecimal ask = parseOrZero(t.getAskPrice());
                BigDecimal tick = plan.tick;

                BigDecimal minInside = bid.add(tick).setScale(priceScale, RoundingMode.DOWN);
                BigDecimal maxInside = ask.subtract(tick).setScale(priceScale, RoundingMode.DOWN);
                if (maxInside.compareTo(minInside) < 0) {
                    if (askSide) { maxInside = ask; minInside = bid.add(tick).min(maxInside); }
                    else { minInside = bid; maxInside = ask.subtract(tick).max(minInside); }
                }

                BigDecimal next = askSide ? currentPrice.add(tick) : currentPrice.subtract(tick);
                if (next.compareTo(minInside) < 0) next = minInside;
                if (next.compareTo(maxInside) > 0) next = maxInside;

                if (next.compareTo(currentPrice) == 0) {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å {} –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä–µ–¥–∞ (–≥—Ä–∞–Ω–∏—Ü–∞). –û—Å—Ç–∞–≤–ª—è—é {}.", side, currentPrice);
                    return placed;
                }

                log.info("‚ö†Ô∏è {}: –Ω–∞ —É—Ä–æ–≤–Ω–µ {} –ø–æ–¥—Å–∞–¥–∏–ª–∏ —á—É–∂–æ–π –æ–±—ä—ë–º (—É—Ä–æ–≤–µ–Ω—å={}, –º–æ–π –æ—Å—Ç–∞—Ç–æ–∫={}). –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è—é: {} ‚Üí {}",
                        side, currentPrice, levelQty, myRemain, currentPrice, next);

                mexc.cancelOrder(apiKey, secret, symbol, orderId);
                currentPrice = next;
                reposts++;

                if (reposts > props.getMexc().getMaxReposts()) {
                    throw new IllegalStateException("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –ø–æ " + side + " " + symbol);
                }

                break; // —Å–Ω–æ–≤–∞ –ø–æ—Å—Ç–∞–≤–∏–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            }
        }
    }

    // ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====================

    private static int deriveQtyScale(SymbolInfo info) {
        // 1) –µ—Å–ª–∏ baseSizePrecision –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —à–∞–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä "0.001") ‚Äî –±–µ—Ä—ë–º –µ—ë —Ç–æ—á–Ω–æ—Å—Ç—å
        String step = info.getBaseSizePrecision();
        if (step != null && step.contains(".")) {
            return scaleFromStepString(step);
        }

        // 2) –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º baseAssetPrecision (—ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞)
        int p = info.getBaseAssetPrecision();
        if (p >= 0) return p;

        // 3) –¥–µ—Ñ–æ–ª—Ç
        return 8;
    }


    private static Integer nullSafeInt(Integer v) { return v; }

    private static BigDecimal levelQty(List<String[]> side, BigDecimal price) {
        for (var lvl : side) if (parseOrZero(lvl[0]).compareTo(price) == 0) return parseOrZero(lvl[1]);
        return BigDecimal.ZERO;
    }

    private static BigDecimal free(AccountInfo acc, String asset) {
        return acc.getBalances().stream()
                .filter(b -> asset.equals(b.getAsset()))
                .map(b -> parseOrZero(b.getFree()))
                .findFirst().orElse(BigDecimal.ZERO);
    }

    private BigDecimal remainingFor(String apiKey, String secret, String symbol, String orderId, BigDecimal fallbackQty) {
        return mexc.openOrders(apiKey, secret, symbol).stream()
                .filter(o -> orderId.equals(o.getOrderId()))
                .findFirst()
                .map(o -> {
                    BigDecimal orig = parseOrZero(o.getOrigQty());
                    BigDecimal exec = parseOrZero(o.getExecutedQty());
                    if (orig.signum() == 0 && exec.signum() == 0) return fallbackQty;
                    BigDecimal left = orig.subtract(exec);
                    return left.max(BigDecimal.ZERO);
                })
                .orElse(BigDecimal.ZERO);
    }

    private static BigDecimal fitQtyUnderQuote(BigDecimal quoteFree, BigDecimal price, BigDecimal qty,
                                               BigDecimal step, int quoteScale) {
        if (qty == null || qty.compareTo(BigDecimal.ZERO) <= 0) return BigDecimal.ZERO;
        if (price == null || price.compareTo(BigDecimal.ZERO) <= 0) return BigDecimal.ZERO;
        BigDecimal q = qty;
        BigDecimal need = price.multiply(q).setScale(quoteScale, RoundingMode.DOWN);
        int guard = 2000;
        while (need.compareTo(quoteFree) > 0 && q.compareTo(BigDecimal.ZERO) > 0 && guard-- > 0) {
            q = q.subtract(step);
            if (q.compareTo(BigDecimal.ZERO) <= 0) return BigDecimal.ZERO;
            need = price.multiply(q).setScale(quoteScale, RoundingMode.DOWN);
        }
        return q;
    }

    private static BigDecimal parseOrZero(String s) {
        if (s == null || s.isBlank()) return BigDecimal.ZERO;
        try { return new BigDecimal(s); } catch (NumberFormatException e) { return BigDecimal.ZERO; }
    }

    private static BigDecimal bd(double d) { return new BigDecimal(Double.toString(d)); }

    private static BigDecimal floorToStep(BigDecimal value, BigDecimal step) {
        if (step == null || step.signum() == 0) return value;
        BigDecimal n = value.divide(step, 0, RoundingMode.DOWN);
        return n.multiply(step);
    }

    private static int scaleFromStepString(String step) {
        int idx = step.indexOf('.');
        return idx < 0 ? 0 : (step.length() - idx - 1);
    }

    private static String fmt(BigDecimal v, int scale) {
        if (v == null) return "0";
        return v.setScale(Math.max(scale, 0), RoundingMode.DOWN).stripTrailingZeros().toPlainString();
    }

    private BigDecimal tickFromBook(String symbol) {
        BookTicker t = mexc.bookTicker(symbol);
        String p = (t.getAskPrice() != null && !t.getAskPrice().isBlank()) ? t.getAskPrice() : t.getBidPrice();
        int scale = (p != null && p.contains(".")) ? (p.length() - p.indexOf('.') - 1) : 0;
        if (scale < 0) scale = 0;
        return BigDecimal.ONE.movePointLeft(scale);
    }

    private int qtyToScale(BigDecimal qty) {
        // –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª—É qtyScale –±–æ–ª—å—à–æ–π, –∞ qty –ø–æ–ª—É—á–∏–ª–∞—Å—å ¬´–∫–æ—Ä–æ—Ç–∫–æ–π¬ª ‚Äî –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º
        String s = qty.stripTrailingZeros().toPlainString();
        int idx = s.indexOf('.');
        return idx < 0 ? 0 : (s.length() - idx - 1);
    }
}
